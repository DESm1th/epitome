#!/bin/bash
#
# scale input normalize
#
# input:     input prefix
# normalize: voxel wise time series normalization [list: pct zscore scale]
#
# output: func_scaled
# prereq: motion_deskull
#
# Time series normalization can be accomplished in one of three ways: percent signal change, zscoring, and scaling to a common mean. For percent signal change, the data is normalized by the mean of each time series to mean = 100. A deviation of 1 from this mean value indicates 1% signal change in the data. This is helpful for analyzing only relative fluctuations in the signal and is best at removing inter-session / subject / run variability, although it can also introduce rare artifacts in small localized regions of the images and may not play well with multivariate techniques such as partial least squares without accounting for these artifacts. Alternatively, one can scale the data, which applies single scaling factor to all voxels such that the global mean of the entire run = 1000. This will help normalize baseline shifts across sessions, runs, and participants. Your selection here might be motivated by personal preference, or in rarer cases, analytic requirements. When in doubt, it is safe to select 'off', as scaling can be done later by hand, or 'scale' if one is doing a simple GLM- style analysis. 'pct' should be used by those with a good reason.

echo '*** MODULE: scale. Normalizes time series. *****************************'
export input=${1}
export normalize=${2}

# loop through sessions
DIR_SESS=`ls -d -- ${DIR_DATA}/${DIR_EXPT}/${SUB}/${DATA_TYPE}/*/`
for SESS in ${DIR_SESS}; do

    # loop through runs
    DIR_RUNS=`ls -d -- ${SESS}/RUN*`
    for RUN in ${DIR_RUNS}; do
        NUM=`basename ${RUN} | sed 's/[^0-9]//g'`

        if [ ! -f ${SESS}/func_scaled.${ID}.${NUM}.nii.gz ]; then

            # calculate time series mean
            3dTstat \
                -prefix ${SESS}/func_tmp_mean.${ID}.${NUM}.nii.gz \
                -mean \
                ${SESS}/${input}.${ID}.${NUM}.nii.gz

            # % SIGNAL CHANGE: mean=100, 1%=1 (normalized by mean)... careful using this with event-related designs
            if [ ${normalize} == 'pct' ]; then
                3dcalc \
                   -prefix ${SESS}/func_scaled.${ID}.${NUM}.nii.gz \
                   -datum float \
                   -a ${SESS}/${input}.${ID}.${NUM}.nii.gz \
                   -b ${SESS}/func_tmp_mean.${ID}.${NUM}.nii.gz \
                   -c ${SESS}/${mask} \
                   -expr "(a-b)/b*c*100"
            # SCALE: set global mean=1000, arbitrary units, no normalization
            elif [ ${normalize} == 'scale' ]; then
                MEAN=$(3dmaskave -quiet -mask ${SESS}/anat_EPI_brain.nii.gz ${SESS}/func_tmp_mean.${ID}.${NUM}.nii.gz)
                3dcalc \
                    -prefix ${SESS}/func_scaled.${ID}.${NUM}.nii.gz \
                    -datum float \
                    -a ${SESS}/${input}.${ID}.${NUM}.nii.gz \
                    -b ${SESS}/${mask} \
                    -expr "a*(1000/${MEAN})*b"
            # ZSCORE: mean=0, SD=1
            elif [ ${normalize} == 'zscore' ]; then
                3dTstat \
                    -prefix ${SESS}/func_tmp_std.${ID}.${NUM}.nii.gz \
                    -stdev \
                    ${SESS}/${input}.${ID}.${NUM}.nii.gz

                3dcalc \
                    -prefix ${SESS}/func_scaled.${ID}.${NUM}.nii.gz \
                    -a ${SESS}/${input}.${ID}.${NUM}.nii.gz \
                    -b ${SESS}/func_tmp_mean.${ID}.${NUM}.nii.gz \
                    -c ${SESS}/func_tmp_std.${ID}.${NUM}.nii.gz \
                    -d ${SESS}/${mask} \
                    -expr "(a-b)/c*d"
                rm ${SESS}/func_tmp_std.${ID}.${NUM}.nii.gz
            fi
            rm ${SESS}/func_tmp_mean.${ID}.${NUM}.nii.gz
        fi
    done
done
