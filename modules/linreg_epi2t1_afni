#!/bin/bash
#
# linreg_epi2t1_afni input dims
#
# input: input prefix
# dims:  target voxel dimensions (isotropic) [float]
#
# output: func_T1
# others: anat_EPI_mask_T1
# prereq: linreg_calc*afni
#
# Brings EPI data in register with T1 single subject space.

echo '*** MODULE: linreg_epi2t1_afni. T1-transforms functional data. *********'
export input=${1}
export dims=${2}

DIR_SESS=`ls -d -- ${DIR_DATA}/${DIR_EXPT}/${SUB}/${DATA_TYPE}/*/`
for SESS in ${DIR_SESS}; do
    DIR_RUNS=`ls -d -- ${SESS}/RUN*`
    for RUN in ${DIR_RUNS}; do
        NUM=`basename ${RUN} | sed 's/[^0-9]//g'`

        # register runs with T1
        if [ ! -f ${SESS}/func_T1.${ID}.${NUM}.nii.gz ]; then
            3dAllineate \
                -prefix ${SESS}/func_T1.${ID}.${NUM}.nii.gz \
                -input ${SESS}/${input}.${ID}.${NUM}.nii.gz \
                -1Dmatrix_apply ${SESS}/mat_EPI_to_T1.aff12.1D \
                -master ${SESS}/reg_EPI_to_T1.nii.gz \
                -float -quiet -final wsinc5 -mast_dxyz ${dims} ${dims} ${dims}

            # if func_noise exists, bring it along
            if [ -f ${SESS}/func_noise.${ID}.${NUM}.nii.gz ]; then
                3dAllineate \
                    -prefix ${SESS}/func_noise_T1.${ID}.${NUM}.nii.gz \
                    -input ${SESS}/func_noise.${ID}.${NUM}.nii.gz \
                    -1Dmatrix_apply ${SESS}/mat_EPI_to_T1.aff12.1D \
                    -master ${SESS}/reg_EPI_to_T1.nii.gz \
                    -float -quiet -final wsinc5 -mast_dxyz ${dims} ${dims} ${dims}
            fi
        fi
    done

    # register session masks with T1
    if [ ! -f ${SESS}/anat_EPI_mask_T1.nii.gz ]; then
        3dAllineate \
            -prefix ${SESS}/anat_EPI_mask_T1.nii.gz \
            -input ${SESS}/anat_EPI_mask.nii.gz \
            -1Dmatrix_apply ${SESS}/mat_EPI_to_T1.aff12.1D \
            -master ${SESS}/reg_EPI_to_T1.nii.gz \
            -float -quiet \
            -final NN \
            -mast_dxyz ${dims} ${dims} ${dims}
    fi
done

space='T1'
mask=anat_EPI_mask_T1.nii.gz
