#!/bin/bash
#
# ica_fix input traindata threshold motionregress cleanup
#
# input:         input prefix
# traindata:     full path to FIX classifier training data to use [list: ?]
# threshold:     a threshold parameter used by FIX. Default 20. [int]
# motionregress: toggle use of fix's ('-m -h 0') motion confounds regression [list: on off]
# cleanup:       toggle deletion of intermediate files [list: on off]
#
# output: func_fix
# prereq: init_* motion_deskull linreg_calc_fsl ica
#
# Runs FSL ICA-based de-noising based on expert rating of ICA components into
# signal and noise. FSL FIX is not easy to run outside of the FSL ecosystem, so
# you must follow a pretty tight perscription to run this module (see prereqs
# below). The key is all registrations need to be done with FSL, and you really
# should use 'detrend' to remove (at least) the linear trend from all voxels.
#
# Internally, this This takes the above MELODIC output, generates a phony
# '.feat' folder, and runs FIX within that. The output it moved to the epitome
# SESS folder as `func_fix`.
#
# It is also recommended to smooth the data before running ICA if you are using
# one of the included FIX classifiers.

echo '*** MODULE: ica_fix. runs FSL FIX using MELODIC outputs. ****************'
export input=${1}
export traindata=${2}
export threshold=${3}
export motionregress=${4}
export cleanup=${5}

DIR_SESS=$(ls -d -- ${DIR_DATA}/${DIR_EXPT}/${SUB}/${DATA_TYPE}/*/)
for SESS in ${DIR_SESS}; do
    SESS=$(basename ${DIR_SESS})
    DIR=$(echo ${DIR_DATA}/${DIR_EXPT}/${SUB}/${DATA_TYPE})
    DIR_T1=$(echo ${DIR_DATA}/${DIR_EXPT}/${SUB}/T1)

    # If we have a T1 for each session, we register to the session T1.
    # Otherwise, we go to the first session.
    if [ `ls -l ${DIR} | grep ^d | wc -l` -eq `ls -l ${DIR_T1} | grep ^d | wc -l` ]; then
        ANAT_T1=$(echo ${DIR_T1}/${SESS}/anat_T1_brain.nii.gz)
    else
        ANAT_T1=$(echo ${DIR_T1}/SESS01/anat_T1_brain.nii.gz)
    fi

    DIR_RUNS=$(ls -d -- ${DIR}/${SESS}/RUN*)
    for RUN in ${DIR_RUNS}; do
        NUM=$(basename ${RUN} | sed 's/[^0-9]//g')

        # run FIX X-noisifier -- no highpass options for now...
        if [ ! -f ${DIR}/${SESS}/func_fix.${ID}.${NUM}.nii.gz ]; then

            ## create a fake FEAT directory
            mkdir ${DIR}/${SESS}/fake.${ID}.${NUM}.feat
            mkdir ${DIR}/${SESS}/fake.${ID}.${NUM}.feat/reg
            mkdir ${DIR}/${SESS}/fake.${ID}.${NUM}.feat/mc

            ## copy relevent nifti inputs
            # melodic (command-line program) full output
            cp -r ${DIR}/${SESS}/MELODIC.${ID}.${NUM} ${DIR}/${SESS}/fake.${ID}.${NUM}.feat/filtered_func_data.ica

            # preprocessed 4D data
            cp ${DIR}/${SESS}/${input}.${ID}.${NUM}.nii.gz ${DIR}/${SESS}/fake.${ID}.${NUM}.feat/filtered_func_data.nii.gz

            # raw data (for generating motion paramaters)
            cp ${DIR}/${SESS}/func_del.${ID}.${NUM}.nii.gz ${DIR}/${SESS}/fake.${ID}.${NUM}.feat/mc/prefiltered_func_data.nii.gz

            # temporal mean of 4D data
            cp ${DIR}/${SESS}/anat_EPI_brain.nii.gz ${DIR}/${SESS}/fake.${ID}.${NUM}.feat/mean_func.nii.gz

            # valid mask relating to the 4D data
            cp ${DIR}/${SESS}/anat_EPI_mask.nii.gz ${DIR}/${SESS}/fake.${ID}.${NUM}.feat/mask.nii.gz

            ## generate FSL-friendly motion paramaters
            mcflirt \
                -in ${DIR}/${SESS}/fake.${ID}.${NUM}.feat/mc/prefiltered_func_data.nii.gz \
                -stats -mats -plots -report

            ## fill in reg folder with example 4D data, structural, and FLIRT transform
            cp ${DIR}/${SESS}/anat_EPI_brain.nii.gz ${DIR}/${SESS}/fake.${ID}.${NUM}.feat/reg/example_func.nii.gz
            cp ${ANAT_T1} ${DIR}/${SESS}/fake.${ID}.${NUM}.feat/reg/highres.nii.gz
            cp ${DIR}/${SESS}/mat_T1_to_EPI.mat ${DIR}/${SESS}/fake.${ID}.${NUM}.feat/reg/highres2example_func.mat

            # FSL FIXAFY TILL THE BREAK OF DAWN
            # https://www.youtube.com/watch?v=uu6DRAvHJVM
            if [ `echo ${motionregress}` == 'on' ]; then
                fix ${DIR}/${SESS}/fake.${ID}.${NUM}.feat ${traindata} ${threshold} -m -h 0
            else
                fix ${DIR}/${SESS}/fake.${ID}.${NUM}.feat ${traindata} ${threshold}
            fi

            # copy output to SESS folder
            mv ${DIR}/${SESS}/fake.${ID}.${NUM}.feat/filtered_func_data_clean.nii.gz ${DIR}/${SESS}/func_fix.${ID}.${NUM}.nii.gz

            # X-destroyifiy fake.feat
            if [ $(echo ${cleanup}) == 'on' ]; then
                rm -r ${DIR}/${SESS}/fake.${ID}.${NUM}.feat
            fi
        fi
    done
done
