#!/usr/bin/env python
"""
Makes pictures of standard views from the hcp files and pastes them
together into a qcpage.

Usage:
    epi-qc-fs2hcp [options]

Options:
  --qcdir PATH             Full path to location of QC directory
  --html-out FILE          Name [default: qc_fsaverage32k.html] (fullpath) to index html file.
  --subject STR            Subject ID to process
  -v,--verbose             Verbose logging
  --debug                  Debug logging in Erin's very verbose style
  -n,--dry-run             Dry run
  --help                   Print help

DETAILS
Make pretty pictures

QC is put in $HCP_DATA_PATH/qc_fsaverage32k/ by default

To do list:
 + split some into a line of images
 + dict of exected pics
 DTSERIESFILE --> the dtseries output file
 SBREFFILE --> rhw SBref
 + move to scene

Written by Erin W Dickie, Feb 2016
"""
from epitome.docopt import docopt
import epitome as epi
import os
import subprocess
import glob
import sys
import pandas as pd
import numpy as np
import tempfile
import shutil

arguments       = docopt(__doc__)
subid           = arguments['--subject']
qcdir           = arguments['--qcdir']
htmlindex       = arguments['--html-out']
VERBOSE         = arguments['--verbose']
DEBUG           = arguments['--debug']
DRYRUN          = arguments['--dry-run']
if DEBUG: print arguments

## define the location of the template scenefile
template_scene = os.path.join(epi.config.find_epitome(),'assets','qcviews_template.scene')
## define the settings for the qcpages
# Note: order for the list is the order in the scene file
# Name: the name that will apear as filenames and in title of qc page
# MakeIndex : if True, this will create a html page of everyparticipant for this views
# SplitHorizontal: Wether or not to split the image in half and display it as a line.
scene_list = [
    {"Name": "aparc1",            "MakeIndex": True,  "SplitHorizontal" : True},
    {"Name": "aparc2",            "MakeIndex": False, "SplitHorizontal" : True},
    {"Name": "VolSurfOutlineAx",  "MakeIndex": True,  "SplitHorizontal" : True},
    {"Name": "VolSurfOutlineCor", "MakeIndex": False, "SplitHorizontal" : True},
    {"Name": "Combined",          "MakeIndex": True,  "SplitHorizontal" : False}]


### Erin's little function for running things in the shell
def docmd(cmdlist):
    "sends a command (inputed as a list) to the shell"
    if DEBUG: print ' '.join(cmdlist)
    if not DRYRUN: subprocess.call(cmdlist)

## to run qc
## copy qc_template.scene into your hcp directory as qc_views.scene
def png_SplitHorizontal(input_png,output_png):
    '''
    uses imagemagick to split the image top and bottom halves to one line
    '''
    docmd(['convert', input_png,\
        '-crop', '100x50%+0+0', os.path.join(tmpdir,'top.png')])
    docmd(['convert', input_png,\
        '-crop', '100x50%+0+200', os.path.join(tmpdir,'bottom.png')])
    docmd(['montage', '-mode', 'concatenate', '-tile', '2x1', \
        os.path.join(tmpdir,'top.png'),\
        os.path.join(tmpdir,'bottom.png'),\
        os.path.join(output_png)])

def write_htmlheader(htmlhandle):
    ''' writes some style elements into the html header '''
    htmlhandle.write('<head>\n<style>\n'
                'body { font-family: futura,sans-serif;\n'
                '        text-align: center;\n'
                '        color: white;\n'
                '        background-color:#333333;}\n'
                'img {width:90%; \n'
                '   display: block\n;'
                '   margin-left: auto;\n'
                '   margin-right: auto }\n'
                '</style></head>\n')

#mkdir a tmpdir for the
tmpdirbase = tempfile.mkdtemp()

## open the template scene for reading
template_txt = open(template_scene, 'r').read()

## get the hcp_data_dir - cause we use it a lot
hcp_data_dir = epi.config.find_hcp_data()
## set the qcdir Structure
if not qcdir:
    qcdir = os.path.join(hcp_data_dir,'qc_fsaverage32k')

## get the subject list
if subid:
    subjects = [subid]
else:
    subjects = epi.utilities.get_subj(hcp_data_dir)

## make pics and qcpage for each subject
for subject in subjects:
    ## make the output directory
    qc_subdir = os.path.join(qcdir,subject)
    docmd(['mkdir','-p', qc_subdir])

    ## make a tempdir for this subject
    tmpdir = os.path.join(tmpdirbase,subject)
    docmd(['mkdir','-p', tmpdir])

    ## copy out template .scene file and find and replace the subid and hcppath
    scenefile = os.path.join(hcp_data_dir,'qc_{}.scene'.format(subject))
    scenestream = open(scenefile,'w')
    scene_txt = template_txt.replace('HCP_DATA_PATH/', hcp_data_dir)
    scene_txt = scene_txt.replace('SUBJID',subject)
    scenestream.write(scene_txt)
    scenestream.close()

    ## write the header for the subjects qc page
    qchtml = os.path.join(qc_subdir, 'qc_{}.html'.format(subject))
    qchtml = open(qchtml,'w')
    qchtml.write('<HTML><TITLE> qc {} fsaverage_LR32k </TITLE>\n'.format(subject))
    write_htmlheader(qchtml)
    qchtml.write('<body>\n<h1> QC {} fsaverage_LR32k</h1>\n'.format(subject))

    ## for each scene, generate the pics and add to qc page
    for scene_num in range(1,len(scene_list) + 1):
        scene_dict = scene_list[scene_num-1]
        pic = os.path.join(qcdir,subject,'{}.png'.format(scene_dict['Name']))
        if scene_dict['SplitHorizontal']==True:
            tmppic = os.path.join(tmpdir, "scene{}.png".format(scene_num))
            docmd(['wb_command', '-show-scene',
                    scenefile, str(scene_num),
                    tmppic,'600', '400'])
            png_SplitHorizontal(tmppic,pic)
        else:
            docmd(['wb_command', '-show-scene',
                    scenefile, str(scene_num),
                    pic,'600', '400'])
        picrelpath = os.path.relpath(pic,os.path.dirname(qchtml.name))
        qchtml.write('<a href="{}"><img src="{}"></a><br>\n'.format(picrelpath,picrelpath))

    ## close the htmlpage stream
    qchtml.close()
    ## remove the subjects scene file
    docmd(['rm', scenefile])

## Start the index html file
for scene_num in range(1,len(scene_list) + 1):
    scene_dict = scene_list[scene_num-1]
    if scene_dict['MakeIndex']==True:

        # open the file
        htmlindex = os.path.join(qcdir, '{}_index.html'.format(scene_dict['Name']))
        htmlindex = open(htmlindex,'w')

        # write the header and title line
        htmlindex.write('<HTML><TITLE> QC {} </TITLE>\n'.format(scene_dict['Name']))
        write_htmlheader(htmlindex)
        htmlindex.write('<body>\n<h1> QC {}</h1>\n'.format(scene_dict['Name']))

        # add the pic and a link to the subjects' page
        for subject in subjects:
            subjectpage = os.path.join(qcdir,subject,'qc_{}.html'.format(subject))
            pic = os.path.join(qcdir,subject,'{}.png'.format(scene_dict['Name']))
            picrelpath = os.path.relpath(pic,os.path.dirname(htmlindex.name))
            subrelpath = os.path.relpath(subjectpage,os.path.dirname(htmlindex.name))
            htmlindex.write('<a href="{}"><img src="{}">{}</a><br>\n'.format(subrelpath,picrelpath,subject))

        ## close the html index stream
        htmlindex.close()

#get rid of the tmpdir
shutil.rmtree(tmpdirbase)
