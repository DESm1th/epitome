#!/usr/bin/env python

import sys
import numpy as np
import scipy as sp
import nibabel as nib

def seed_corr(func, seed, mask):
    """
    seed-corr
    ---------

    Produces a correlation map of the mean time series within the seed with
    every voxel in the supplied mask. This function assumes all supplied
    images are the same size.

    Usage:

        seed-corr functional.nii.gz seed-mask.nii.gz brian-mask.nii.gz

    At the moment, the seed mask only works with a single seed (all nonzero
    voxels will be pooled.) This outputs a single image with the r-values.
    """

    # determine the filenames
    if func[-7:] == '.nii.gz':
        funcname = func[:-7]
    elif func[-4:] == '.nii' or func[-4:] == '.mnc':
        funcname = func[:-4]

    if seed[-7:] == '.nii.gz':
        seedname = seed[:-7]
    elif seed[-4:] == '.nii' or seed[-4:] == '.mnc':
        seedname = seed[:-4]

    filename = 'corr_' + seedname + '_' + funcname + '.nii.gz'



    # import template, store the output paramaters
    seed = nib.load(seed)
    outA = seed.get_affine()
    outH = seed.get_header()

    # import data
    seed = seed.get_data()
    func = nib.load(func).get_data()
    mask = nib.load(mask).get_data()

    # move to 2D
    dims = func.shape
    func = func.reshape((dims[0]*dims[1]*dims[2], dims[3]))
    seed = seed.reshape((dims[0]*dims[1]*dims[2], 1))
    mask = mask.reshape((dims[0]*dims[1]*dims[2], 1))

    # get mean seed timeseries
    idx_seed = np.where(seed >= 1)[0]
    idx_mask = np.where(mask >= 1)[0]
    idx = np.intersect1d(idx_seed, idx_mask)
    seed_ts = func[idx, :]
    seed_ts = np.mean(seed_ts, axis=0)

    # create correlation vector
    #corr = sp.corrcoef(seed_ts, func[idx_mask, :])

    # create output array
    out = np.zeros([dims[0]*dims[1]*dims[2], 1])

    # look through each time series, calculating r + z
    for i in np.arange(len(idx_mask)):
        out[idx_mask[i]] = np.corrcoef(seed_ts,
                                       func[idx_mask[i], :], rowvar=0)[1,0]\

    # create the 3D volume and export
    out = out.reshape([dims[0], dims[1], dims[2], 1])
    out = nib.nifti1.Nifti1Image(out, outA, outH)

    out.to_filename(filename)
    print('*** Completed ' + filename + '***')


if __name__ == '__main__':
    
    # check if the user needs help
    if len(sys.argv) == 4:
        seed_corr(sys.argv[1], sys.argv[2], sys.argv[3])

    elif sys.argv[1] == '-h' or sys.argv[1] == '--help':
        print seed_corr.__doc__

    else:
        print('seed-corr -h or --help for help.')
