#!/usr/bin/env python
"""
Produces a correlation map of the mean time series within the seed with
every voxel in the supplied mask. This function assumes all supplied
images are the same size.

Usage:
    epi-seed-corr [options] <func> <seed>

Arguments:
    <func>          functional data
    <seed>          seed mask

Options:
    --roi-label INT    Specify the numeric label of the ROI you want a seedmap for
    --outputname STR   Specify the output filename
    --mask             brainmask
    --surfaceonly      func or seed cifti files only contains surface data
    --weighted         compute weighted average timeseries from the seed map
    --use-TRs FILE     Only use the TRs listed in the file provided (TR's in file starts with 1)
    --output-ts        Also output write the from the seed to text

DETAILS:
    At the moment, the seed mask only works with a single seed (all nonzero
    voxels will be pooled.) This outputs a single image with the r-values.
"""

import sys
import numpy as np
import scipy as sp
import nibabel as nib
from epitome.docopt import docopt

def determine_filetype(filename):
    '''
    reads in filename and determines the filetype from it's extention
    returns two values a string for the filetype, and the basename of the file
    without its extention
    '''
    MRbase = os.path.basename(filename)
    if MRbase.endswith(".nii"):
        if MRbase.endswith("dtseries.nii"):
            MR_type = "cifti"
            MRbase = MRbase.replace(".dtseries.nii","")
        elif: MRbase.endswith(".dscalar.nii"):
            MR_type = "cifti"
            MRbase = MRbase.replace(".dscalar.nii","")
        else:
            MR_type = "nifti"
            MRbase = MRbase.replace(".nii","")
    elif MRbase.endswith("nii.gz"):
        MR_type = "nifti"
        MRbase = MRbase.replace(".nii.gz","")
    elif MRbase.endswith(".gii"):
         MR_type = "gifti"
         MRbase = MRbase.replace(".shape.gii","").replace(".func.gii","")

    return MR_type, MRbase

def main():
    arguments = docopt(__doc__)
    func   = arguments['<func>']
    seed   = arguments['<seed>']
    mask   = arguments['--mask']
    roi_label = arguments['--roi-label']
    surfaceonly = arguments['--surfaceonly']
    outbase = arguments['--outputname']
    weighted = arguments['--weighted']
    TR_file = arguments['--use-TRs']
    output_ts = arguments['--output-ts']

    ## make the tempdir
    tempdir = tempfile.mkdtemp()

    func_type, funcbase = determine_filetype(func)
    seed_type, seedbase = determine_filetype(seed)
    if mask:
        mask_type, maskbase = determine_filetype(mask)
    else: mask_type = None

    ## determine outbase if it has not been specified
    if not outbase:
        outputdir = os.path.dirname(func)
        outbase = os.path.join(outputdir,funcbase + '_' + seedbase )

    ## run epi-meants to get the ts file
    ts_tmpfile = os.path.join(tmpdir, '{}_meants.csv'.format(outbase))
    meants_cmd = ['epi-meants']
    if surfaceonly: meants_cmd.append('--surfaceonly')
    if mask_type: meants_cmd.extend(['--mask', mask])
    if weighted: meants_cmd.append('--weighted')
    if roi_label: meants_cmd.extend(['--roi-label',roi_label])
    meants_cmd.extend(['--outputcsv', ts_tmpfile, func, seed])
    docmd(meants_cmd)

    # load the file we just made
    seed_ts = np.loadtxt(ts_tmpfile)

    ## convert to nifti
    if func_type == "cifti":
        func_fnifti = os.path.join(tempdir,'func.nii.gz')
        docmd(['wb_command','-cifti-convert','-to-nifti',func, func_fnifti])
        func_data, outA, header, dims = epi.utilities.loadnii(func_fnifti)

    # import template, store the output paramaters
    if func_type == "nifti":
        func_data, outA, header, dims = epi.utilities.loadnii(func)

    if mask_type == "cifti":
        docmd(['wb_command','-cifti-convert', mask, mask_fnifti])
        mask_data, _, _, _ = epi.utilities.loadnii(mask_fnifti)

    if mask_type == "nifti":
        mask_data, _, _, _ = epi.utilities.loadnii(mask)

    # decide which TRs go into the correlation
    if TR_file:
        TR_file = np.loadtxt(TR_file, int)
        TRs = TR_file - 1 # shift TR-list to be zero-indexed
    else:
        TRs = np.arange(dims[3])

    # get mean seed timeseries
    if mask:
        idx_mask = np.where(mask >= 1)[0]
    else idx_mask:
        idx_mask = np.arange(dims[0]*dims[1]*dims[2])

    # create output array
    out = np.zeros([dims[0]*dims[1]*dims[2], 1])

    # look through each time series, calculating r
    for i in np.arange(len(idx_mask)):
        out[idx_mask[i]] = np.corrcoef(seed_ts[TRs], func[idx_mask[i], TRs])[0][1]

    # create the 3D volume and export
    out = out.reshape([dims[0], dims[1], dims[2], 1])
    out = nib.nifti1.Nifti1Image(out, outA)

    # write out nifti
    if func_type == "nifti":
        out.to_filename('{}.nii.gz'.format(output))

    if func_type == "cifti":
        out.to_filename(os.path.join(tempdir,'out.nii.gz'))
        docmd(['wb_command', '-cifti-reduce', func,
                'MIN', os.path.join(tmpdir, 'template.dscalar.nii')])
        ## convert back
        docmd(['wb_command','-cifti-convert','-from-nifti',
            os.path.join(tempdir,'out.nii.gz'),
            os.path.join(tmpdir, 'template.dscalar.nii'),
            '{}.dscalar.nii'.format(output)])

    # write out the ts if asked
    if output_ts:
        docmd(['cp', tm_tmpfile, '{}_ts.txt'.format(output)])

    ## remove the tempdirectory
    shutil.rmtree(tempdir)

if __name__ == '__main__':
    main()
