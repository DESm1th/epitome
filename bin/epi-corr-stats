#!/usr/bin/env python
"""
Produces a .csv of the average statistics series within the seed with
every voxel in the supplied mask. This function assumes all supplied
images are the same size.

Usage: 
    epi-corr-stats [options] <4d-input> <seeds> <brain-mask>

Arguments: 
    <4d-input>      Input 4d data to correlate (likely an fMRI scan).
    <seeds>         Set of ROIs to correlate between.
    <brain-mask>    A brain mask.

Options: 
    --stat TYPE     Statistic to compute between ROIs [default: corr]
                        -- valid: corr (correlation), 
                                 pcorr (partial correlation).

DETAILS

    This computes the defined statistic between the mean time series
    within all unique ROIs and returns them as a .csv matrix. All 
    inputs should be defined on the same voxel grid (i.e., have the 
    exact same dimensions). All seed voxels falling outside of the 
    supplied brain mask will not contribute to the statistic.

    epi-corr-stats -h or --help prints this message.
"""

import sys
import numpy as np
import scipy as sp
import nibabel as nib
from epitome.docopt import docopt

def main():
    arguments = docopt(__doc__)
    data = arguments['<4d-input>']
    seed = arguments['<seeds>']
    mask = arguments['<brain-mask>']
    stat = arguments['--stat']

    # determine the filenames
    if data[-7:] == '.nii.gz':
        dataname = data[:-7]
    elif data[-4:] == '.nii' or data[-4:] == '.mnc':
        dataname = data[:-4]

    if seed[-7:] == '.nii.gz':
        seedname = seed[:-7]
    elif seed[-4:] == '.nii' or seed[-4:] == '.mnc':
        seedname = seed[:-4]

    filename = 'corr_' + seedname + '_' + dataname + '.csv'

    # import template, store the output paramaters
    seed = nib.load(seed)
    outA = seed.get_affine()
    outH = seed.get_header()

    # import data
    seed = seed.get_data()
    data = nib.load(data).get_data()
    mask = nib.load(mask).get_data()

    # move to 2D
    dims = data.shape
    data = data.reshape((dims[0]*dims[1]*dims[2], 1))
    seed = seed.reshape((dims[0]*dims[1]*dims[2], 1))
    mask = mask.reshape((dims[0]*dims[1]*dims[2], 1))

    # init output vector
    out = np.array([])

    # get mean seed dataistic from each, append to output
    for s in np.unique(seed)[1:]:    
        idx_seed = np.where(seed >= s)[0]
        idx_mask = np.where(mask >= 1)[0]
        idx = np.intersect1d(idx_seed, idx_mask)
        seed_data = data[idx, :]
        seed_data = np.mean(seed_data, axis=0)
        out = np.concatenate((out[...,:], seed_data))

    # write out csv
    np.savetxt(filename, out, delimiter=",")

    print('*** Completed ' + filename + '***')

if __name__ == '__main__':
    main()
