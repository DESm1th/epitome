#!/usr/bin/env python
"""
Makes temporary seed corr maps using 3 rois of interest
then makes pretty picture of these maps.

Usage:
    epi-PINT-vis snaps [options] <func.dtseries.nii> <subject> <PINT_summary.csv>
    epi-PINT-vis index [options]

Arguments:
    <func.dtseries.nii>        A dscalar map to make pics of
    <subject>                  Subject ID for HCP surfaces
    <PINT_summary.csv>         The output csv from the PINT analysis step

Options:
  --qcdir PATH             Full path to location of QC directory
  --hcp-data-dir PATH      The directory for HCP subjects (overrides HCP_DATA enviroment variable)
  --subjects-filter STR    A string that can be used to filter out subject directories
  --use-all-dirs           Turn off automatic filtering of subject ids (to remove 'bin'ect)
  --colour-palette STR     Specify the colour palette for the seed correlation maps
  -v,--verbose             Verbose logging
  --debug                  Debug logging in Erin's very verbose style
  -n,--dry-run             Dry run
  --help                   Print help

DETAILS
This makes pretty pictures of your hcp views using connectome workbenches "show scene" commands
It pastes the pretty pictures together into some .html QC pages

"""
import seaborn as sns
import matplotlib.pyplot as plt
import epitome as epi
import os
import subprocess
import glob
import sys
import pandas as pd
import numpy as np
import tempfile
import shutil
import nibabel as nib
from epitome.docopt import docopt

arguments       = docopt(__doc__)
snaps_only      = arguments['snaps']
index_only      = arguments['index']
subject         = arguments['<subject>']
qcdir           = arguments['--qcdir']
func            = arguments['<func.dtseries.nii>']
summarycsv      = arguments['<PINT_summary.csv>']
hcp_data_dir     = arguments['--hcp-data-dir']
seedcorr_palette = arguments['--colour-palette']
subjects_filter = arguments['--subjects-filter']
use_all_dirs    = arguments['--use-all-dirs']
VERBOSE         = arguments['--verbose']
DEBUG           = arguments['--debug']
DRYRUN          = arguments['--dry-run']
if DEBUG: print arguments
sns.set(context="paper", font="monospace")
## define the location of the template scenefile
template_dir = os.path.join(epi.config.find_epitome(),'assets','hcp_qc')
## define the settings for the qcpages
# Note: order for the list is the order in the scene file
# Name: the name that will apear as filenames and in title of qc page
# MakeIndex : if True, this will create a html page of everyparticipant for this views
# SplitHorizontal: Wether or not to split the image in half and display it as a line.
QCmodes = {
    'seedcorr':{
        "TemplateFile":'seedcorr_template.scene',
        "scene_list" :  [
            {"Idx": 2, "Name": "dtDorsal",  "MakeIndex": False,  "SplitHorizontal" : False,"Keep":False},
            {"Idx": 3, "Name": "dtVentral", "MakeIndex": False, "SplitHorizontal" : False,"Keep":False},
            {"Idx": 4, "Name": "dtAnt",  "MakeIndex": False,  "SplitHorizontal" : False,"Keep":False},
            {"Idx": 5, "Name": "dtPost", "MakeIndex": False, "SplitHorizontal" : False,"Keep":False},
            {"Idx": 6, "Name": "VolAx", "MakeIndex": True,  "SplitHorizontal" : True, "Keep":True},
            {"Idx": 7, "Name": "VolCor",  "MakeIndex": True,  "SplitHorizontal" : True, "Keep":True},
            {"Idx": 8, "Name": "VolSag",  "MakeIndex": True,  "SplitHorizontal" : True, "Keep":True},
            {"Idx": 1, "Name": "dtLat",     "MakeIndex": True,  "SplitHorizontal" : True, "Keep":True}],
        "montage_list" : [{"Name": "CombinedView",
                       "Pics":["dtAnt","dtPost","dtDorsal","dtVentral"],
                       "Layout":"4x1",
                       "MakeIndex": True}]
    }
}


PINTnets = [{ 'NETWORK': 2, 'roiidx': 1},
                { 'NETWORK': 3, 'roiidx': 16},
                { 'NETWORK': 4, 'roiidx': 28},
                { 'NETWORK': 5, 'roiidx': 41},
                { 'NETWORK': 6, 'roiidx': 49},
                { 'NETWORK': 7, 'roiidx': 74}]

# could also be NETWORK4 idx 33
# seed_vertices = [ {'Name':'L-precuneus', "vertex" : 13363, 'hemi': 'L'},
#                   {'Name':'L-superior-parietal', "vertex" : 14785, 'hemi': 'L'},
#                   {'Name':'L-anterior-insula', "vertex" : 10939, 'hemi': 'L'},
#                   {'Name':'R-mpfc', "vertex" : 28901, 'hemi': 'R'}]

## set radius of geodesic ROIS
SEED_RADIUS = 4

### Erin's little function for running things in the shell
def docmd(cmdlist):
    "sends a command (inputed as a list) to the shell"
    if DEBUG: print ' '.join(cmdlist)
    if not DRYRUN: subprocess.call(cmdlist)

## to run qc
## copy qc_template.scene into your hcp directory as qc_views.scene
def png_SplitHorizontal(input_png,output_png,tmpdir):
    '''
    uses imagemagick to split the image top and bottom halves to one line
    '''
    docmd(['convert', input_png,\
        '-crop', '100x50%+0+0', os.path.join(tmpdir,'top.png')])
    docmd(['convert', input_png,\
        '-crop', '100x50%+0+200', os.path.join(tmpdir,'bottom.png')])
    docmd(['montage', '-mode', 'concatenate', '-tile', '2x1', \
        os.path.join(tmpdir,'top.png'),\
        os.path.join(tmpdir,'bottom.png'),\
        os.path.join(output_png)])

def make_heatmap(summary_df, meants, output_png):

    corrmat = meants.corr()
    # Set up the matplotlib figure
    f, ax = plt.subplots(figsize=(10, 8))

    # Draw the heatmap using seaborn
    sns.heatmap(corrmat, vmax=.9, square=True)

    # Use matplotlib directly to emphasize known networks
    for i in summary_df.index:
        if i and summary_df.loc[i,'NETWORK'] != summary_df.loc[i-1,'NETWORK']:
            ax.axhline(len(summary_df) - i, c="w",linewidth=3.0 )
            ax.axvline(i, c="w",linewidth=3.0)
    f.tight_layout()
    f.savefig(output_png)

def write_htmlheader(htmlhandle):
    ''' writes some style elements into the html header '''
    htmlhandle.write('<head>\n<style>\n'
                'body { font-family: futura,sans-serif;\n'
                '        text-align: center;\n'
                '        color: white;\n'
                '        background-color:#333333;}\n'
                'a:link {color: #01DFD7;}\n'
                'a:visited  {color: #AC58FA;}\n'
                'img {width:90%; \n'
                '   display: block\n;'
                '   margin-left: auto;\n'
                '   margin-right: auto }\n'
                '</style></head>\n')

def write_index(qcdir, subjects, seedname, viewname):
    '''
    Writes html file with all subjects for one pic shown together
    '''
    # open the file
    pic_name = ('{}_{}'.format(seedname, viewname))
    htmlindex = os.path.join(qcdir, '{}_index.html'.format(pic_name))
    htmlindex = open(htmlindex,'w')

    # write the header and title line
    htmlindex.write('<!DOCTYPE html>\n<HTML><TITLE> QC {} </TITLE>\n'.format(pic_name))
    write_htmlheader(htmlindex)
    htmlindex.write('<body>\n<h1> QC {}</h1>\n'.format(pic_name))

    # add the pic and a link to the subjects' page
    for subject in subjects:
        subjectpage = os.path.join(qcdir,subject,'qc_{}.html'.format(seedname))
        pic = os.path.join(qcdir,subject,'{}.png'.format(pic_name))
        picrelpath = os.path.relpath(pic,os.path.dirname(htmlindex.name))
        subrelpath = os.path.relpath(subjectpage,os.path.dirname(htmlindex.name))
        htmlindex.write('<a href="{}"><img src="{}">{}</a><br>\n'.format(subrelpath,picrelpath,subject))

    ## close the html index stream
    htmlindex.close()


## pic a QC dict
qc_dict = QCmodes['seedcorr']
scene_list = qc_dict['scene_list']
montage_list = qc_dict['montage_list']
template_scene = os.path.join(template_dir,qc_dict['TemplateFile'])

## open the template scene for reading
template_txt = open(template_scene, 'r').read()

## get the hcp_data_dir - cause we use it a lot
hcp_data_dir = epi.config.find_hcp_data()
docmd(['mkdir',os.path.join(hcp_data_dir,'scene')])
#mkdir a tmpdir for the
tmpdirbase = tempfile.mkdtemp()
#tmpdirbase = os.path.join(hcp_data_dir,'temp')

## set the qcdir Structure
if not qcdir:
    qcdir = os.path.join(hcp_data_dir,'qc_{}'.format('PINT_vis'))

## get the subject list
if subject:
    subjects = [subject]
else:
    subjects = epi.utilities.get_subj(hcp_data_dir)
    if subjects_filter:
        subjects = filter(lambda x: subjects_filter in x, subjects)
    ## remove common directories that are not subjects from subjects list
    if not use_all_dirs:
        subjects = filter(lambda x: 'logs' not in x, subjects)
        subjects = filter(lambda x: 'bin' not in x, subjects)
        subjects = filter(lambda x: 'qc_' not in x, subjects)
        subjects = filter(lambda x: 'scene' not in x, subjects)

## make pics and qcpage for each subject
if not index_only or snaps_only:
    for subject in subjects:

        qc_subdir = os.path.join(qcdir, subject)

        if not os.path.exists(qc_subdir):
            docmd(['mkdir','-p', qc_subdir])

            ## make a tempdir for this subject
            tmpdir = os.path.join(tmpdirbase,subject)
            docmd(['mkdir','-p', tmpdir])

            if not os.path.isfile(func):
                print("{} not found...skipping".format(func))
                continue

            func_fnifti = os.path.join(tmpdir,'func.nii.gz')
            ## convert funcfile to fake nifti
            docmd(['wb_command','-cifti-convert','-to-nifti',func, func_fnifti])
            ## load functional file as nibabel object using epi-utilities
            f_data, affine, header, dims = epi.utilities.loadnii(func_fnifti)
            ## mean the fuctional cifti image to make cifti template for the output
            docmd(['wb_command', '-cifti-reduce', func, 'MIN', os.path.join(tmpdir, 'template.dscalar.nii')])

            # Load the datset of correlations between cortical brain networks
            summary_df = pd.read_csv(summarycsv)
            tmeants = pd.read_csv(summarycsv.replace('_summary', '_tvertex_meants'), header=None).transpose()
            imeants = pd.read_csv(summarycsv.replace('_summary', '_ivertex_meants'), header=None).transpose()

            make_heatmap(summary_df, tmeants, os.path.join(qc_subdir, 'tvertex_corrmat.png'))
            make_heatmap(summary_df, imeants, os.path.join(qc_subdir, 'ivertex_corrmat.png'))

            for pint_dict in PINTnets:
                '''
                for each seed vertex make and roi and generate a seed map
                '''
                ## get info from the seed_dict
                roiidx = pint_dict['roiidx']
                network = pint_dict['NETWORK']

                ## make a dscalar of the network map
                networkdf = summary_df.loc[summary_df.loc[:,'NETWORK'] == network,:]
                networkdf.to_csv(os.path.join(tmpdir,'networkdf.csv'),
                                columns = ['hemi', 'ivertex','tvertex'],
                                index = False)


                for vert_type in ['ivertex','tvertex']:

                    rois_dscalar = os.path.join(tmpdir,'rois{}{}.dscalar.nii'.format(
                                                            vert_type, network))

                    ## make the overlaying ROIs
                    docmd(['epi-surface-rois',
                            '--vertex-col', vert_type,
                            os.path.join(tmpdir,'networkdf.csv'),
                            str(SEED_RADIUS),
                            os.path.join(hcp_data_dir, subject, 'MNINonLinear','fsaverage_LR32k',
                                '{}.L.midthickness.32k_fs_LR.surf.gii'.format(subject)),
                            os.path.join(hcp_data_dir, subject, 'MNINonLinear','fsaverage_LR32k',
                                '{}.R.midthickness.32k_fs_LR.surf.gii'.format(subject)),
                            rois_dscalar])

                    ## makes the seedcorr_dscalar
                    if vert_type == 'ivertex':
                        meants = imeants.iloc[:,roiidx - 1].values
                    if vert_type == 'tvertex':
                        meants = tmeants.iloc[:,roiidx - 1].values

                    seedcorr_dscalar = os.path.join(tmpdir,'scorr{}{}.dscalar.nii'.format(
                                                            vert_type, network))

                    ## correlated the mean timeseries with the func data
                    out = np.zeros([dims[0]*dims[1]*dims[2], 1])
                    for i in np.arange(f_data.shape[0]):
                        out[i] = np.corrcoef(meants, f_data[i, :])[0][1]
                    ## reshape data and write it out to a fake nifti file
                    out = out.reshape([dims[0], dims[1], dims[2], 1])
                    out = nib.nifti1.Nifti1Image(out, affine)
                    out.to_filename(os.path.join(tmpdir,'seedcorr{}.nii.gz'.format(network)))
                    ## convert back
                    docmd(['wb_command','-cifti-convert','-from-nifti',
                        os.path.join(tmpdir,'seedcorr{}.nii.gz'.format(network)),
                        os.path.join(tmpdir, 'template.dscalar.nii'),
                        seedcorr_dscalar])

                    if seedcorr_palette:
                        docmd(['wb_command', '-cifti-palette', seedcorr_dscalar,
                            'MODE_AUTO_SCALE', seedcorr_dscalar,
                            '-palette-name', seedcorr_palette])


                    ## copy out template .scene file and find and replace the subid and hcppath
                    hcp_data_realpath = os.path.realpath(hcp_data_dir)
                    scenefile = os.path.join(hcp_data_dir,'scene','seedcorr_{}_{}{}.scene'.format(subject, network, vert_type))
                    scenestream = open(scenefile,'w')
                    scene_txt = template_txt.replace('HCP_DATA_PATH', hcp_data_realpath)
                    scene_txt = scene_txt.replace('HCP_DATA_RELPATH', os.path.relpath(hcp_data_realpath,os.path.dirname(scenefile)))
                    scene_txt = scene_txt.replace('SUBJID',subject)
                    scene_txt = scene_txt.replace('SEEDMASKDIR', os.path.dirname(rois_dscalar))
                    scene_txt = scene_txt.replace('SEEDMASKRELDIR', os.path.relpath(os.path.dirname(rois_dscalar),os.path.dirname(scenefile)))
                    scene_txt = scene_txt.replace('SEEDMASKGII', os.path.basename(rois_dscalar))
                    scene_txt = scene_txt.replace('SEEDCORRDIR', os.path.dirname(seedcorr_dscalar))
                    scene_txt = scene_txt.replace('SEEDCORRRELDIR', os.path.relpath(os.path.dirname(seedcorr_dscalar),os.path.dirname(scenefile)))
                    scene_txt = scene_txt.replace('SEEDCORRCIFTI', os.path.basename(seedcorr_dscalar))
                    scenestream.write(scene_txt)
                    scenestream.close()

                    ## write the header for the subjects qc page
                    qchtml = os.path.join(qc_subdir, 'qc_{}{}.html'.format(vert_type, network))
                    qchtml = open(qchtml,'w')
                    qchtml.write('<!DOCTYPE html>\n<HTML><TITLE> {} {}{}</TITLE>\n'.format(subject,vert_type,network))
                    write_htmlheader(qchtml)
                    qchtml.write('<body>\n<h1> {} network {} {} seed correlation </h1>\n'.format(subject,network, vert_type))

                    ## for each scene, generate the pics and add to qc page
                    for scene_dict in scene_list:
                        if scene_dict['Keep']==True:
                            pic = os.path.join(qc_subdir,'{}{}_{}.png'.format(vert_type,network,scene_dict['Name']))
                            picrelpath = os.path.relpath(pic,os.path.dirname(qchtml.name))
                            qchtml.write('<a href="{}"><img src="{}"></a><br>\n'.format(picrelpath,picrelpath))
                        else:
                            pic = os.path.join(tmpdir,'{}{}_{}.png'.format(vert_type,network,scene_dict['Name']))
                        if scene_dict['SplitHorizontal']==True:
                            tmppic = os.path.join(tmpdir, "scene{}.png".format(scene_dict['Idx']))
                            docmd(['wb_command', '-show-scene',
                                    scenefile, str(scene_dict['Idx']),
                                    tmppic,'600', '400'])
                            png_SplitHorizontal(tmppic,pic,tmpdir)
                        else:
                            docmd(['wb_command', '-show-scene',
                                    scenefile, str(scene_dict['Idx']),
                                    pic,'600', '400'])

                    for montage_dict in montage_list:
                        pic = os.path.join(qc_subdir,'{}{}_{}.png'.format(vert_type,network,montage_dict['Name']))
                        picrelpath = os.path.relpath(pic,os.path.dirname(qchtml.name))
                        qchtml.write('<a href="{}"><img src="{}"></a><br>\n'.format(picrelpath,picrelpath))
                        montage_cmd=['montage', '-mode', 'concatenate', '-tile', montage_dict['Layout']]
                        for subpic in montage_dict['Pics']:
                            #should add something that read scenelist to find if temp
                            montage_cmd.append(os.path.join(tmpdir,'{}{}_{}.png'.format(vert_type,network, subpic)))
                        montage_cmd.append(pic)
                        docmd(montage_cmd)

                    ## close the htmlpage stream
                    qchtml.close()
                    ## remove the subjects scene file
                    if not DEBUG: docmd(['rm', scenefile])


## Start the index html file
# if index_only or not snaps_only:
#     subjects = epi.utilities.get_subj(qcdir)
#     for seed_dict in seed_vertices:
#         for scene_dict in scene_list:
#             if scene_dict['MakeIndex']==True:
#                 write_index(qcdir, subjects, seed_dict['Name'],scene_dict['Name'])
#         for montage_dict in montage_list:
#             if montage_dict['MakeIndex']==True:
#                 write_index(qcdir, subjects, seed_dict['Name'],montage_dict['Name'])

if not DEBUG: docmd(['rmdir', os.path.join(hcp_data_dir,'scene')])
#get rid of the tmpdir
shutil.rmtree(tmpdirbase)
