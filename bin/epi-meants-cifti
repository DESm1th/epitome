#!/usr/bin/env python
"""
Produces a correlation map of the mean time series within the seed with
every voxel in the supplied mask. This function assumes all supplied
images are the same size.

Usage:
    epi-meants-cifti [options] <func> <seed>

Arguments:
    <func>          functional data
    <seed>          seed mask

Options:
    --mask             brainmask
    --outputcsv PATH   Specify the output filename
    --surfaceonly      func or seed only contains surface data
    --Lsurf            Left-surface for analysis
    --Rsurf            Right-surface for analysis
    --debug            Debug logging
    -n,--dry-run       Dry run

DETAILS:
    This function works by converting the func and seed files
    from cifti ('dtseries.nii', "dscalar.nii") to "fake" nifty files than running
    epi-meants within a temp directory.

    If the rois and a dlabel file - they will be converted to a temporary dscalar mask
"""

import sys
import numpy as np
import scipy as sp
import nibabel as nib
import subprocess
import os
import tempfile
import shutil
from epitome.docopt import docopt

### Erin's little function for running things in the shell
def docmd(cmdlist):
    "sends a command (inputed as a list) to the shell"
    if DEBUG: print ' '.join(cmdlist)
    if not DRYRUN: subprocess.call(cmdlist)

def main():
    global DEBUG
    global DRYRUN

    arguments = docopt(__doc__)
    func = arguments['<func>']
    seed = arguments['<seed>']
    mask = arguments['--mask']
    outputcsv = arguments['--outputcsv']
    surfaceonly = arguments['--surfaceonly']
    Lsurf = arguments['--Lsurf']
    Rsurf = arguments['--Rsurf']
    DEBUG = arguments['--debug']
    DRYRUN = arguments['--dry-run']

    ## make the tempdir
    tempdir = tempfile.mkdtemp()

    ## set tempfile names
    func_fnifti = os.path.join(tempdir,'func.nii.gz')
    seed_fnifti = os.path.join(tempdir,'seed.nii.gz')
    mask_fnifti = os.path.join(tempdir,'mask.nii.gz')

    ## determine outbase if it has not been specified
    if not outputcsv:
        outputdir = os.path.dirname(func)
        funcbase = os.path.basename(func)
        if ".dtseries.nii" in funcbase:
            funcbase = funcbase.replace(".dtseries.nii","")
        if ".dscalar.nii" in funcbase:
            funcbase = funcbase.replace(".dscalar.nii","")

        seedbase = os.path.basename(seed)
        if ".dscalar.nii" in seedbase:
            seedbase = seedbase.replace(".dscalar.nii","")
        if ".dtseries.nii" in seedbase:
            seedbase = seedbase.replace(".dtseries.nii","")
        if ".dlabel.nii" in seedbase:
            seedbase = seedbase.replace(".dlabel.nii","")

        outputcsv = os.path.join(outputdir,funcbase + '_' + seedbase + '.csv' )


    ## if seed is dlabel - convert to dscalar
    if ".dlabel.nii" in seed:
        longseed=os.path.join(tempdir,'seedmap.dscalar.nii')
        shortseed = os.path.join(tempdir,'seedmapcombined.dscalar.nii')
        docmd(['wb_command', '-cifti-all-labels-to-rois', seed, 1,longseed])
        num_maps = nib.load(longseed).get_data().shape[4]
        docmd(['wb_command', '-cifti-math', '(x*1)+(y*2)', shortseed,
              '-var','x',longseed, '-select','1',str(1),
              '-var','y',longseed, '-select','1',str(2)])
        for roi in range(3,num_maps+1):
            docmd(['wb_command', '-cifti-math', '(x)+(y*{})'.format(roi), shortseed,
                  '-var','x',shortseed,
                  '-var','y',longseed, '-select','1',str(roi)])
        seed = shortseed

    ## special case - where the label file only includes surfaces (i.e. aparc
    ## remove the volume bit from the functional
    seeddim5=nib.load(seed).get_data().shape[5]
    funcdim5=nib.load(func).get_data().shape[5]

    if surfaceonly:
         if seeddim5 < funcdim5:
             "if the seed is only surfaces - then we make a surface only func file to match"
             tempLsurf=os.path.join(tempdir, 'Ltmp.gii')
             tempRsurf=os.path.join(tempdir, 'Rtmp.gii')
             newfunc=os.path.join(tempdir, 'funcsurfs.dtseries.nii')
             docmd(['wb_command','-cifti-separate', func, COLUMN,
                    '-metric', 'CORTEX_LEFT', tempLsurf,
                    '-metric', 'CORTEX_RIGHT', tempRsurf])
             docmd(['wb_command', '-cifti-create-dense-timeseries', newfunc,
                '-left-metric', tempLsurf, '-roi-left', Lsurf,
                '-right-metric', tempRsurf, '-roi-right', Rsurf,])
             func = newfunc

         if seeddim5 > funcdim5:
             '''
             if the func is only surfaces (ex thickness)
             we make a surface only seed file to match
             '''
             tempLsurf=os.path.join(tempdir, 'Ltmp.gii')
             tempRsurf=os.path.join(tempdir, 'Rtmp.gii')
             newseed=os.path.join(tempdir, 'seedsurfs.dscalar.nii')
             docmd(['wb_command','-cifti-separate', seed, COLUMN,
                    '-metric', 'CORTEX_LEFT', tempLsurf,
                    '-metric', 'CORTEX_RIGHT', tempRsurf])
             docmd(['wb_command', '-cifti-create-dense-scalar', newseed,
                '-left-metric', tempLsurf, '-roi-left', Lsurf,
                '-right-metric', tempRsurf, '-roi-right', Rsurf,])
             seed = newseed

    seeddim5=nib.load(seed).get_data().shape[5]
    funcdim5=nib.load(func).get_data().shape[5]

    if seeddim5 != funcdim5:
        sys.exit("Func file {} and ROIs {} do not have the same size".format(seedim5, funcdim5))
    ## convert to nifti
    docmd(['wb_command','-cifti-convert','-to-nifti',func, func_fnifti])

    ## if seed if dscalar - convert
    if ".dscalar.nii" in seed or ".dtseries.nii" in seed:
        docmd(['wb_command','-cifti-convert','-to-nifti',seed, seed_fnifti])

    ## if mask exists - convert it, if not make one from the func.dscalar.nii
    if not mask:
        docmd(['fslmaths', func_fnifti, '-Tmin', '-bin',  mask_fnifti])
    else:
        docmd(['wb_command','-cifti-convert', mask, mask_fnifti])

    ##run seed connectome-workbench
    docmd(['epi-meants', '--outputcsv',outputcsv,
        func_fnifti, seed_fnifti, mask_fnifti])


    ## remove the tempdirectory
    shutil.rmtree(tempdir)

if __name__ == '__main__':
    main()
