#!/usr/bin/env python

import os, sys
import epitome as epi

def print_dirs(in_dir):
    """
    Prints the directories found within the input directory.
    """

    dir_list = [d for d in os.listdir(in_dir) if
                           os.path.isdir(os.path.join(in_dir, d)) == True]
    dir_list.sort()
    for d in dir_list:
        print(d)
    if len(dir_list) == 0:
        print('None found.')

def edit_mode(mode):

    print('')
    print('Current sessions: ')

    print_dirs(mode)

    # move onto mode/run loop

    print('')
    print('How many sessions should there be?')

    sessions = raw_input('Sessions: ' )

    try:
        sessions = int(sessions)
        for sess in range(sessions):
            s = sess+1
            sess_name = 'SESS' + '%02d' % s
            os.system('mkdir ' + os.path.join(mode, sess_name))

            print('How many runs in session ' + '%02d' % s + '?')
            runs = raw_input('Runs: ')

            try:
                runs = int(runs)
                for run in range(runs):
                    r = run+1
                    run_name = 'RUN' + '%02d' % r 
                    os.system('mkdir ' + os.path.join(mode, sess_name, 
                                                             run_name))
            except:
                print('Number of runs should be integer!')
    except:
        print('Number of sessions should be integer!')

def edit_subject(subject):
    """
    A function that generates subject directories, 
    """

    print('')
    print('Current image modalities:')

    print_dirs(subject)

    # move onto modality loop
    flag = 0
    while flag == 0:
        print('')
        subj_name = os.path.basename(subject)
        print('What modality would you like to edit/add for ' + 
                                             str(subj_name) + '?')

        mode = raw_input('Mode: ')

        # make the modality folder, if it does not exist
        if os.path.isdir(os.path.join(subject, mode)) == False:
            os.system('mkdir ' + os.path.join(subject, mode))
        else:
            print('Editing existing modality ' + str(mode))

        # edit modality, and check for the escape flag
        edit_mode(os.path.join(subject, mode))

        print('Would you like to continue adding modes? (y/N)')
        response = raw_input('Continue? ')

        if response in ['Y', 'y']:
            pass
        else:
            print('Finished with ' + str(subject))
            flag = 1

def main():
    """
    A CLI for creating experiment directories for EPItome-XL.
    """

    dir_path, dir_pipe, dir_afni, cores = epi.config.return_paths()

    # make sure we have the appropriate permissions
    if epi.utilities.has_permissions(dir_path) == False:
        raise Exception(
             'You are not permitted to write to the experiment directory')

    # make experiment directory
    print('')
    print('Current experiments:')
    print_dirs(dir_path)

    print('Which experiment would you like to edit? ')

    experiment_name = raw_input('Experiment: ')

    if os.path.isdir(os.path.join(dir_path, experiment_name)) == True:
        print('Already exists! Adding to existing experiment.')
    else:
        os.system('mkdir ' + os.path.join(dir_path, experiment_name))

    # subject generator
    expt = os.path.join(dir_path, experiment_name)
    
    # print a list of the subject, if they exist
    if os.listdir(expt) == []:
        pass
    else:
        print('Current participants: ')
        print_dirs(expt)

    # move on to a subject loop
    flag = 0
    while flag == 0:
        
        print('')
        print('Input subject name:')

        subject = raw_input('Subject: ')

        # make the subject folder, if it does not exist
        if os.path.isdir(os.path.join(expt, subject)) == False:
            os.system('mkdir ' + os.path.join(expt, subject))
        else:
            print('Editng existing subject ' + str(subject))

        # edit subject, and check for the escape flag
        edit_subject(os.path.join(expt, subject))

        print('Would you like to continue adding subjects? (y/N)')
        response = raw_input('Continue? ')

        if response in ['Y', 'y']:
            pass
        else:
            flag = 1

    print('Thanks for editing ' + str(experiment_name) + '!')
