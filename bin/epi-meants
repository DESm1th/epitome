#!/usr/bin/env python
"""
Produces a .csv of the average timeseries within al rois seed with
every voxel in the supplied mask. This function assumes all supplied
images are the same size.

Usage:
    epi-meants [options] <4d-input> <seeds> <brain-mask>

Arguments:
    <4d-input>      Input 4d data to correlate (likely an fMRI scan).
    <seeds>         Set of ROIs to correlate between.
    <brain-mask>    A brain mask.

Options:
    --outputcsv FILE     Full path to the outputcsv file

DETAILS

    This computes the defined statistic between the mean time series
    within all unique ROIs and returns them as a .csv matrix. All
    inputs should be defined on the same voxel grid (i.e., have the
    exact same dimensions). All seed voxels falling outside of the
    supplied brain mask will not contribute to the statistic.

    epi-corr-stats -h or --help prints this message.
"""

import sys
import os
import numpy as np
import scipy as sp
import nibabel as nib
from epitome.docopt import docopt

def main():
    arguments = docopt(__doc__)
    data = arguments['<4d-input>']
    seed = arguments['<seeds>']
    mask = arguments['<brain-mask>']
    filename = arguments['--outputcsv']


    # determine the filenames
    outputdir = os.path.dirname(data)
    b_dataname = os.path.basename(data)
    b_dataname = b_dataname.replace('.mnc','').replace('.gz','').replace('.nii','')
    b_seedname = os.path.basename(seed)
    b_seedname = b_seedname.replace('.mnc','').replace('.gz','').replace('.nii','')

    if not filename:
        filename = os.path.join(outputdir,
                                'mean_ts_{}_{}.csv'.format(b_seedname,
                                                           b_dataname))

    # import template, store the output paramaters
    seed = nib.load(seed)
    outA = seed.get_affine()
    outH = seed.get_header()

    # import data
    seed = seed.get_data()
    data = nib.load(data).get_data()
    mask = nib.load(mask).get_data()

    # move to 2D
    dims = data.shape
    data = data.reshape((dims[0]*dims[1]*dims[2], dims[3]))
    seed = seed.reshape((dims[0]*dims[1]*dims[2], 1))
    mask = mask.reshape((dims[0]*dims[1]*dims[2], 1))

    # init output vector
    rois = np.unique(seed)[1:]
    out = np.zeros((len(rois), dims[3]))

    # get mean seed dataistic from each, append to output
    for i, roi in enumerate(rois):
        idx_seed = np.where(seed == roi)[0]
        idx_mask = np.where(mask >= 1)[0]
        idx = np.intersect1d(idx_seed, idx_mask)
        out[i,:] = np.mean(data[idx, :], axis=0)

    # write out csv
    np.savetxt(filename, out, delimiter=",")

    print('*** Completed ' + filename + '***')

if __name__ == '__main__':
    main()
