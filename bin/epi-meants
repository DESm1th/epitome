#!/usr/bin/env python
"""
Produces a csv file mean time series within the seed with
every voxel/vertex in the supplied mask.
Works with nifty, cifti and gifti formats.

Usage:
    epi-meants [options] <func> <seed>

Arguments:
    <func>          functional data
    <seed>          seed mask

Options:
    --mask               brainmask (file format should match seed)
    --outputcsv PATH     Specify the output filename
    --outputlabels PATH  Specity a file to print the ROI row ids to.
    --surfaceonly        func or seed only contains surface data
    --debug              Debug logging
    -n,--dry-run         Dry run
    -h, --help           Prints this message

DETAILS:
Produces a csv file mean time series within the seed with
every voxel/vertex in the supplied mask.
Works with nifty, cifti and gifti formats.

If the rois and a dlabel.nii file,they will be converted to a temporary
dscalar file.

If the --surfaceonly option is selected, the wb_command -cifti-separate will
be used to extract the surface data from the func, seed and mask images
as gifti files. The gifti data from Left and Right surfaces is then concatenated
together into a numpy array.

The default output filename is <func>_<seed>_meants.csv
inside the same directory as the <func> file.
This can be changed by specifying the full path after the '--outputcsv' option.

The interger labels for the seeds extracted can be printed to text using the
'--outputlabels' option.

Written by Erin W Dickie, March 17, 2016
"""

import sys
import numpy as np
import scipy as sp
import nibabel as nib
import subprocess
import os
import tempfile
import shutil
import epitome as epi
from epitome.docopt import docopt

### Erin's little function for running things in the shell
def docmd(cmdlist):
    "sends a command (inputed as a list) to the shell"
    if DEBUG: print ' '.join(cmdlist)
    if not DRYRUN: subprocess.call(cmdlist)

def image_basename_noext(filename):
    " returns basename of mr image without extention"
    basename =  os.path.basename(filename)
    basename = basename.replace(".shape.gii","").replace(".func.gii","")
    basename = basename.replace(".dtseries","")
    basename = basename.replace(".dscalar","").replace(".dlabel","")
    basename = basename.replace(".nii","").replace(".gz","")
    return basename

def load_surfaceonly(filename, tempdir):
    '''
    separate a cifti file into surfaces,
    then loads and concatenates the surface data
    '''
    ## separate the cifti file into left and right surfaces
    L_data_surf=os.path.join(tempdir, 'Ldata.func.gii')
    R_data_surf=os.path.join(tempdir, 'Rdata.func.gii')
    docmd(['wb_command','-cifti-separate', filename, 'COLUMN',
        '-metric', 'CORTEX_LEFT', L_data_surf,
        '-metric', 'CORTEX_RIGHT', R_data_surf])

    ## load both surfaces and concatenate them together
    Ldata = epi.utilities.load_gii_data(L_data_surf)
    Rdata = epi.utilities.load_gii_data(R_data_surf)
    data = np.vstack((Ldata, Rdata))

    ## return the 2D concatenated surface data
    return data

def main():
    global DEBUG
    global DRYRUN

    arguments = docopt(__doc__)
    func = arguments['<func>']
    seed = arguments['<seed>']
    mask = arguments['--mask']
    outputcsv = arguments['--outputcsv']
    outputlabels = arguments['--outputlabels']
    surfaceonly = arguments['--surfaceonly']
    DEBUG = arguments['--debug']
    DRYRUN = arguments['--dry-run']


    ## make the tempdir
    tempdir = tempfile.mkdtemp()

    ## determine outbase if it has not been specified
    if not outputcsv:
        outputdir = os.path.dirname(func)
        funcbase = image_basename_noext(func)
        seedbase = image_basename_noext(seed)
        outputcsv = os.path.join(outputdir,funcbase + '_' + seedbase + '_meants.csv' )

    ## if seed is dlabel - convert to dscalar
    if ".dlabel.nii" in seed:
        longseed=os.path.join(tempdir,'seedmap.dscalar.nii')
        shortseed = os.path.join(tempdir,'seedmapcombined.dscalar.nii')
        docmd(['wb_command', '-cifti-all-labels-to-rois', seed, '1',longseed])
        num_maps = nib.load(longseed).get_data().shape[4]
        docmd(['wb_command', '-cifti-math', '(x*1)+(y*2)', shortseed,
              '-var','x',longseed, '-select','1',str(1),
              '-var','y',longseed, '-select','1',str(2)])
        for roi in range(3,num_maps+1):
            docmd(['wb_command', '-cifti-math', '(x)+(y*{})'.format(roi), shortseed,
                  '-var','x',shortseed,
                  '-var','y',longseed, '-select','1',str(roi)])
        seed = shortseed

    ## the data loading bit

    if surfaceonly:
        """
        if the seed is only surfaces
        then we use wb_command -cifti-separate get the data as surfaces
        """
        data = load_surfaceonly(func, tempdir)
        seed = load_surfaceonly(seed, tempdir)
        if mask:
            mask = load_surfaceonly(mask, tempdir)
    else:

        ## load the functional data according to filetype
        if 'dtseries.nii' in func or 'dscalar.nii' in func:
            data, _, _, _ = epi.utilities.loadcifti(func)
        elif '.shape.gii' in func or 'func.gii' in func:
            data = epi.utilities.load_gii_data(func)
        else:
            data, _, _, _ = epi.utilities.loadnii(data)

        ## load the seed data according to filetype
        if 'dtseries.nii' in seed or 'dscalar.nii' in seed:
            seed, _, _, _ = epi.utilities.loadcifti(seed)
        elif '.shape.gii' in seed or 'func.gii' in seed:
            seed = epi.utilities.load_gii_data(seed)
        else:
            seed, _, _, _ = epi.utilities.loadnii(seed)

        ## loads the mask data if provided
        if mask:
            ## load the mask data according to filetype
            if 'dtseries.nii' in mask or 'dscalar.nii' in mask:
                mask, _, _, _ = epi.utilities.loadcifti(mask)
            elif '.shape.gii' in mask or 'func.gii' in mask:
                mask = epi.utilities.load_gii_data(mask)
            else:
                mask, _, _, _ = epi.utilities.loadnii(mask)

    ## check that dim 0 of both seed and func
    if data.shape[0] != seed.shape[0]:
        sys.exit('ERROR: at the func and seed images have difference number of voxels')

    if seed.shape[1] != 1:
        print("WARNING: your seed volume has more than one timepoint")

    if mask:
        # attempt to mask out non-brain regions in ROIs
        n_seeds = len(np.unique(seed))
        seed = seed * mask
        if len(np.unique(seed)) != n_seeds:
            sys.exit('ERROR: At least 1 ROI completely outside mask for {}.'.format(output))

    # init output vector
    rois = np.unique(seed)[1:]
    out_data = np.zeros((len(rois), data.shape[1]))

    # get mean seed dataistic from each, append to output
    for i, roi in enumerate(rois):
        idx = np.where(seed == roi)[0]
        out_data[i,:] = np.mean(data[idx, :], axis=0)

    # if pcorr:
    #     out_data_corr = epi.stats.pcorr(out_data)
    # else:
    #     out_data_corr = np.corrcoef(out_data)

    # write out csv
    np.savetxt(outputcsv, out_data, delimiter=",")

    if outputlabels: np.savetxt(outputlabels, rois, delimiter=",")

    ## remove the tempdirectory
    shutil.rmtree(tempdir)

if __name__ == '__main__':
    main()
