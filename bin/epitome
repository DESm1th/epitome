#!/usr/bin/env python
"""
     _  _  . |_  _   _   _  | a platform for mri analysis pipeline development
    (- |_) | |_ (_) ||| (-  | github.com/josephdviviano/epitome
       |                    |

    epitome help   -- prints help for selected module.
    epitome verify -- checks input files for experiment.
    epitome check  -- checks installation paths & environment.
    epitome run    -- produce pre-processing and QC scripts.
    epitome clean  -- produce clean-up scripts.
"""

import os, sys, stat
from copy import copy
import epitome as epi
from fnmatch import fnmatch

DIR_DATA = epi.config.find_data()
DIR_AFNI = epi.config.find_afni()
DIR_MATLAB = epi.config.find_matlab()

def get_modules(dir_pipe, moduletype='pre', used=[]):
    """
    Prints the available modules. Optionally prompts the user to select one.
    If provided with a list of 'used' modules, these are stripped from the
    output.
    """

    # try to import a list of the module types
    dir_modules = os.path.join(dir_pipe, 'modules', str(moduletype))
    try:
        module_list = [f for f in os.listdir(dir_modules)
                               if os.path.isfile(os.path.join(dir_modules, f))]
    except:
        module_types = os.listdir(os.path.join(dir_pipe, 'modules'))
        print('Invalid module type. Available:\n')
        for m in module_types:
            print('    ' + str(m))
        return None

    # if we get a used list, remove them from the module list
    if used != None:
        for u in used:
            try:
                module_list.remove(u)
            except:
                pass

    try:
        selection = epi.utilities.selector_list(module_list)
        used.append(selection)
        return selection, used
    except ValueError as ve:
        print('Invalid selection')
        return None, used

def get_mode(expt):
    """
    Prints the available image modalities. Optionally prompts the user to
    select one.
    """
    # get a sorted list of the experiments
    expt = os.path.join(DIR_DATA, expt)
    subjects = [d for d in os.listdir(expt)
                        if os.path.isdir(os.path.join(expt, d))]

    mode_list = []
    for subj in subjects:
        subjdir = os.path.join(expt, subj)
        modes = [d for d in os.listdir(subjdir) if os.path.isdir(os.path.join(subjdir, d))]
        mode_list.extend(modes)

    mode_list = list(set(mode_list)) # keep unique entries
    try:
        selection = epi.utilities.selector_list(mode_list)
        return selection
    except ValueError as ve:
        return None

def get_experiments(check=None):
    """
    Prints the available experiments. Optionally prompts the user to select
    one.
    """
    if epi.utilities.has_permissions(DIR_DATA) == False:
        sys.exit()

    # get a sorted list of the experiments
    expt_list = [d for d in os.listdir(DIR_DATA)
                         if os.path.isdir(os.path.join(DIR_DATA, d))]

    try:
        selection = epi.utilities.selector_list(expt_list)

        # this is for the commandline usage
        if check == 'check':
            check_directories(selection)
        # this is an internal usage
        else:
            return selection

    except ValueError as ve:
        return None

def print_help(module):
    """
    Prints the contents of the markdown file line by line, wrapping long sections.
    """

    import textwrap

    dir_pipe = epi.config.find_epitome()

    print('')
    if module != None:
        helpfile = open(os.path.join(dir_pipe, 'doc/' + module + '.md'), 'rb')
        helpfile = helpfile.readlines()

        for line in helpfile:
            if len(line) < 80:
                print line.strip('\n')
            else:
                print("\n".join(textwrap.wrap(line)))

def help_query():
    """
    Lists all modules ans allows user to select one to print the associated help.
    """
    dir_pipe = epi.config.find_epitome()

    # ask which module type we want to look at
    module_types = os.listdir(os.path.join(dir_pipe, 'modules'))

    try:
        response = epi.utilities.selector_list(module_types)
    except ValueError as ve:
        print("""You didn't input a valid number! Default = 'pre'.""")
        response = 'pre'

    print('Which module do you need help with?')
    module, used = get_modules(dir_pipe, moduletype=str(response))
    print_help(module)

def check_environment(mode='verbose'):
    """
    Looks for the various manditory and optional dependencies and warns
    the user if the environment is not configured correctly.
    """
    # collect local checks from config.py
    dir_freesurfer = epi.config.find_freesurfer()
    dir_freesurfer_data = epi.config.find_freesurfer_data()
    dir_fix = epi.config.find_fix()
    dir_fsl = epi.config.find_fsl()
    dir_pipe = epi.config.find_epitome()
    dir_hcp_data = epi.config.find_hcp_data()
    dir_hcp_tools = epi.config.find_hcp_tools()
    workbench = epi.config.find_workbench()
    dir_clone = epi.config.find_clone()

    # checks for manditory software
    if DIR_DATA == None:
        print('ERROR: Mandatory EPITOME_DATA variable is not set.')
        sys.exit()

    if os.path.isdir(DIR_DATA) == False:
        print('ERROR: Mandatory epitome data directory does not exist: {}'.format(DIR_DATA))
        sys.exit()

    if dir_pipe == None:
        print('ERROR: Mandatory package epitome is not on your path??')
        sys.exit()

    if DIR_AFNI == None:
        print('ERROR: Mandatory package AFNI is not on your path.')
        sys.exit()

    if dir_fsl == None:
       print('ERROR: Mandatory package FSL is not on your path.')
       sys.exit()

    if dir_freesurfer == None:
        print('ERROR: Mandatory package Freesurfer is not on your path.')
        sys.exit()

    if dir_freesurfer_data == None:
        print('ERROR: Mandatory variable SUBJECTS_DIR is not set.')
        sys.exit()

    if os.path.isdir(dir_freesurfer_data) == False:
        print('ERROR: Mandatory Freesurfer data directory does not exist: {}'.format(DIR_DATA))
        sys.exit()

    if DIR_MATLAB == None:
        print('WARNING: MATLAB / compiler is unavailable. Some modules will not work.\n'
              'See here for more: http://afni.nimh.nih.gov/sscc/dglen/McRetroTS\n')

    if dir_hcp_data == None:
        print('WARNING: HCP_DATA is not set. HCP modules will not work.')

    if dir_hcp_tools == None:
        print('WARNING: HCPPIPEDIR is not set.  HCP modules will not work.')

    if workbench == None:
        print('WARNING: wb_command is unavailable. HCP modules will not work.')

    if dir_fix == None:
        print('WARNING: FSL FIX is unavailable. Some modules will not work.')
    print(DIR_DATA)
    if mode == 'verbose':
        txt = ('\nCurrent environment configuration:\n\n'
               '    data directory  -- {DIR_DATA}\n'
               '    epitome         -- {dir_pipe}\n'
               '    clone directory -- {dir_clone}\n'
               '    freesurfer      -- {dir_freesurfer}\n'
               '    freesurfer data -- {dir_freesurfer_data}\n'
               '    afni            -- {DIR_AFNI}\n'
               '    fsl             -- {dir_fsl}\n'
               '    fsl fix         -- {dir_fix}\n'
               '    matlab          -- {DIR_MATLAB}\n'
               '    hcp data        -- {hcp_data}\n'
               '    hcp tools       -- {hcp_tools}\n'
               '    wb_command      -- {wb_command}\n'.format(
                    DIR_DATA=DIR_DATA,
                    dir_pipe=dir_pipe,
                    dir_clone=dir_clone,
                    dir_freesurfer=dir_freesurfer,
                    dir_freesurfer_data=dir_freesurfer_data,
                    DIR_AFNI=DIR_AFNI,
                    dir_fsl=dir_fsl,
                    dir_fix=dir_fix,
                    DIR_MATLAB=DIR_MATLAB,
                    hcp_data=dir_hcp_data,
                    hcp_tools=dir_hcp_tools,
                    wb_command=workbench))
        print(txt)

def check_run(expt, subj, mode, sess, run):
    """
    Returns True if RUN folder contains a NIFTI file, False otherwise.

    Usage:
        truth = check_run(experiment, subject, image modality, session, run)
    """
    # retrieve the number of files within each run folder
    dir_file = os.path.join(DIR_DATA, expt, subj, mode, sess, run)
    file_list = [d for d in os.listdir(dir_file)
                         if os.path.isfile(os.path.join(dir_file, d))]

    n_files = filter(lambda x: x[-7:] == '.nii.gz' or
                               x[-4:] == '.nii', file_list)
    n_files = len(n_files)

    return n_files

def check_mode(expt, subj, mode):
    """
    This returns each image modality's total number of runs and checks for run
    folders with missing data.
    """
    n_runs = 0

    # retrieve the sessions for a given image modality
    dir_mode = os.path.join(DIR_DATA, expt, subj, mode)
    sess_list = [d for d in os.listdir(dir_mode)
                         if os.path.isdir(os.path.join(dir_mode, d))]

    # retrieve runs for a given session
    for sess in sess_list:
        dir_sess = os.path.join(dir_mode, sess)
        run_list = [d for d in os.listdir(dir_sess)
                            if os.path.isdir(os.path.join(dir_sess, d))
                            and d[0:3] == 'RUN']

        # check for runs missing/too many NIFTI files, print warnings
        for run in run_list:
            n_files = check_run(expt, subj, mode, sess, run)
            n_runs = n_runs + n_files

            if n_files == 0:
                print('subject {}, {}, sess {}, run {} contains no NIFTI file.'.format(
                    str(subj), str(mode), str(sess), str(run)))

            if n_files > 1:
                print('subject {}, {}, sess {}, run {} contains {} NIFTI files.'.format(
                    str(subj), str(mode), str(sess), str(run), str(n_files)))
    return n_runs

def check_directories(expt):
    """
    This checks the image modalities for each subject in an experiment. It also
    reports the number of subjects with each kind of image modality.
    """
    if epi.utilities.has_permissions(os.path.join(DIR_DATA, expt)) == False:
        sys.exit('ERROR: you do not have permissions to edit this experiment.')

    # attempt to access the subjects for a given experiment
    try:
        subjects = epi.utilities.get_subj(os.path.join(DIR_DATA, expt))
    except:
        print('ERROR: experiment path is incorrect {}'.format(expt))

    # this dict will hold our count
    mode_dict = {}

    # loop through subjects, returning image modality counts, and record
    for subj in subjects:

        # retrieve the image modalities for a given subject
        dir_subj = os.path.join(DIR_DATA, expt, subj)
        mode_list = [d for d in os.listdir(dir_subj)
                             if os.path.isdir(os.path.join(dir_subj, d))]

        for mode in mode_list:
            # check inside each modality, get the number of sessions
            n_runs = check_mode(expt, subj, mode)

            # add them to the count
            try:
                mode_dict[str(mode)] = mode_dict[str(mode)] + n_runs
            except:
                mode_dict[str(mode)] = n_runs

    # print out the file counts per image modality
    print('')
    for mode_key in mode_dict:
        print('     {} NIFTIs in {}'.format(str(mode_dict[mode_key]), str(mode_key)))
    print('')

def writer(p_list, line, filename, f, output, bkup, mode):
    """
    Writes lines to the master script.
    """
    if mode == 'exp':
        filename = '${{DIR_DATA}}/${{DIR_EXPT}}/{}'.format(filename)

    # output will == None if we made a mistake
    if output != None:
        out_line = '{} >> {}\n'.format(line, filename)
        f.write(out_line)
        p_list.append(line)

    # if we did make a mistake, restore the old output
    else:
        output = copy(bkup)

    return p_list, output

def print_list(lst):
    """
    Prints all the items in a list.
    """
    for item in lst:
        print('    {}'.format(item))

def get_loop(function, *args):
    """
    Runs the supplied function until the function no longer returns none.
    """
    var = None
    while var is None:
        var = function(*args)
    return var

def find_files(directory, include, exclude=None):
    """
    Finds all files in the given directory including some pattern, and
    excluding any directories matching some pattern if defined.
    """
    fnames = []
    for pth, dirs, files in os.walk(directory, topdown=True):
        if exclude:
            dirs[:] = [d for d in dirs if exclude not in d]
        for f in files:
            if include in f:
                fnames.append(os.path.join(pth, f))

    return fnames

def purge(files):
    """
    Takes a list of filenames and attempts to remove them.
    """
    if len(files) > 0:
        for f in files:
            os.remove(f)

def run_cleanup():
    """
    Prints out scripts used to manage / remove epitome outputs.

        Perhaps this can be merged with the main function?
    """
    epi.utilities.check_os()
    dir_pipe = epi.config.find_epitome()

    print('epitome cleanup: THIS DELETES DATA.')
    expt = get_loop(get_experiments)
    if expt == 'stop':
        sys.exit()

    print('Experiment: {}. Select image modality.'.format(expt))
    mode = get_loop(get_mode, expt)
    if mode == 'stop':
        sys.exit()

    # get the subjects
    print('Would you like to cleanup all subjects, or just some?')
    decision = get_loop(epi.utilities.selector_list, ['all', 'some'])
    if decision == 'stop':
        sys.exit()
    elif decision == 'some':
        flag = 0
        subjects = []
        subj_list = epi.utilities.get_subj(os.path.join(DIR_DATA, expt))
        while flag == 0:
            print("""Select a subject to cleanup. Type 'stop' to stop.""")
            subj = get_loop(epi.utilities.selector_list, subj_list)
            if subj == 'stop':
                flag = 1
                continue
            subjects.append(subj)
            subj_list.remove(subj)
            print('The following subjects are slated for cleanup:')
            print_list(subjects)
    elif decision == 'all':
        subjects = epi.utilities.get_subj(os.path.join(DIR_DATA, expt))
        print('All subjects slated for cleanup.')

    # get all files with given pattern
    print("""Input target file-name pattern to delete (e.g., '.txt'):""")
    extension = raw_input('extension: ')
    fnames = find_files(os.path.join(DIR_DATA, expt), extension, exclude='RUN')
    prefixes = []
    for f in fnames:
        prefixes.append(os.path.basename(f).split('.')[0])
    prefixes = (list(set(prefixes)))
    prefixes.sort()

    # pick files by their prefix to remove
    remove = []
    flag = 0
    while flag == 0:
        print("""Select file types to remove. Type 'stop' to stop.""")
        prefix = get_loop(epi.utilities.selector_list, prefixes)
        if prefix == 'stop':
            flag = 1
            continue
        remove.append(prefix)
        prefixes.remove(prefix)

        print('The following file types are slated to be removed:')
        print_list(remove)

    # loop through subjects, removing specified files in the selected modality
    for prefix in remove:
        for subj in subjects:
            purge(find_files(os.path.join(DIR_DATA, expt, subj, mode), prefix, exclude='RUN'))

# The Actual Pipeline ##########################################################
def main():
    """
    Runs the main epitome CLI.
    """
    epi.utilities.check_os()
    check_environment('quiet')
    datetime, user, f_id = epi.utilities.get_date_user()
    dir_pipe = epi.config.find_epitome()
    dir_clone = epi.config.find_clone()

    # Figure out if this is set up for hcp tools
    dir_hcp_data = epi.config.find_hcp_data()
    dir_hcp_tools = epi.config.find_hcp_tools()
    workbench = epi.config.find_workbench()
    if all([dir_hcp_data, dir_hcp_tools, workbench]) :
        HCPMODE = True
        print('Running epitome - with HCP extras!. Select experiment.')
    else:
        HCPMODE = False
        print('Running epitome. Select experiment.')

    # define experiment directory and check permissions
    if epi.utilities.has_permissions(DIR_DATA) == False:
        sys.exit("You do not have permission to write in {}".format(DIR_DATA))
    expt = get_loop(get_experiments)
    if expt == 'stop':
        sys.exit()
    if epi.utilities.has_permissions(os.path.join(DIR_DATA, expt)) == False:
        sys.exit("You do not have permission to write in {}".format(os.path.join(DIR_DATA, expt)))

    # make the epitome directory if required
    if os.path.isdir(dir_clone) == False:
        os.system('mkdir -p {}'.format(dir_clone))

    # present the user with the current pipelines
    pipelist = os.listdir(os.path.join(dir_clone))
    pipelist = filter(lambda x: os.path.isdir(os.path.join(dir_clone, x)), pipelist)
    pipelist.append('***NEW***')
    print('Select which version you want from {}:'.format(dir_clone))
    ID = get_loop(epi.utilities.selector_list, pipelist)
    if ID == 'stop':
        sys.exit()

    if ID == '***NEW***':
        print('Input unique identifier for this pipeline (alphanumeric):')
        ID = raw_input('ID: ')
        ID = epi.utilities.mangle_string(ID)
        localpath = '{}/{}'.format(dir_clone, ID)

        print('Replicating the current pipeline in {}/{}.'.format(dir_clone, ID))
        os.system('mkdir -p {}'.format(localpath))
        os.system('cp -r {}/bin {}'.format(dir_pipe, localpath))
        os.system('cp -r {}/doc {}'.format(dir_pipe, localpath))
        os.system('cp -r {}/epitome {}'.format(dir_pipe, localpath))
        os.system('cp -r {}/assets {}'.format(dir_pipe, localpath))
        os.system('cp -r {}/modules {}'.format(dir_pipe, localpath))

    else:
        localpath = '{}/{}'.format(dir_clone, ID)

    # get the date and time, current user, f_id, set dir_pipe to be local
    master = 'master_{}_{}.sh'.format(f_id, ID)
    cmd = 'cmd_{}_{}.sh'.format(f_id, ID)
    proc = 'proclist_{}_{}.sh'.format(f_id, ID)
    dir_pipe = copy(localpath)

    print('Experiment: {}. Select image modality.'.format(expt))
    mode = get_loop(get_mode, expt)
    if mode == 'stop':
        sys.exit()

    print('Image Modality: {}. Adding Freesurfer stages.'.format(mode))
    f = open(os.path.join(DIR_DATA, expt, master), 'wb')
    f.write('#!/bin/bash\n\n'
            '# Master script for {expt}: {mode}.\n'
            '# Generated: {datetime} by {user}.\n\n'
            '## Setup\n'
            'export DIR_PIPE={dir_pipe}\n'
            'export DIR_DATA={DIR_DATA}\n'
            'export DIR_EXPT={expt}\n'
            'export DATA_TYPE={mode}\n'
            'export ID={ID}\n\n'
            'export PROC=${{DIR_DATA}}/${{DIR_EXPT}}/{proc}\n\n'
            'export SUBJECTS=$(epi-listsubj ${{DIR_DATA}}/${{DIR_EXPT}})\n\n'.format(
                ID=ID,
                cmd=cmd,
                expt=expt,
                mode=mode,
                proc=proc,
                user=user,
                datetime=datetime,
                dir_pipe=dir_pipe,
                DIR_DATA=DIR_DATA,
                DIR_MATLAB=DIR_MATLAB))

    if HCPMODE :
        # if hcp pipe env defined, use hcp-export
        f.write('## Freesurfer\n'
            'epi-fsrecon ${DIR_DATA} ${DIR_EXPT} ${PROC}\n'
            '## Freesurfer to HCP conversion\n'
            'epi-fsrecon2hcp ${DIR_DATA} ${DIR_EXPT} ${PROC}\n'
            '. ${DIR_PIPE}/modules/hcp/hcpexport ${DIR_DATA} ${DIR_EXPT} >> ${PROC}\n\n')
    else :
        # if no hcp pipe env defined, use fs export
        f.write('## Freesurfer\n'
            'epi-fsrecon ${DIR_DATA} ${DIR_EXPT} ${PROC}\n'
            '. ${DIR_PIPE}/modules/anat/fsexport ${DIR_DATA} ${DIR_EXPT} >> ${PROC}\n\n')

    f.write('## Begin Pipeline\n'
            'for SUB in ${{SUBJECTS}}; do\n\n'
            'export CMD=${{DIR_DATA}}/${{DIR_EXPT}}/${{SUB}}/{cmd}\n'
            'cat > ${{CMD}} << EOF\n'
            '#!/bin/bash\n'
            'set -e\n\n'
            'export DIR_PIPE=${{DIR_PIPE}}\n'
            'export DIR_DATA=${{DIR_DATA}}\n'
            'export DIR_EXPT=${{DIR_EXPT}}\n'
            'export DATA_TYPE=${{DATA_TYPE}}\n'
            'export ID=${{ID}}\n'
            'export SUB=${{SUB}}\n'
            """McRetroTS='{dir_pipe}/bin/run_McRetroTS.sh {DIR_MATLAB}'\n"""
            'EOF\n\n'.format(
                ID=ID,
                cmd=cmd,
                expt=expt,
                mode=mode,
                proc=proc,
                user=user,
                datetime=datetime,
                dir_pipe=dir_pipe,
                DIR_DATA=DIR_DATA,
                DIR_MATLAB=DIR_MATLAB))

    p_list = [] # keeps track of our command-list
    line, output = epi.commands.init_basic.run()
    p_list, output = writer(p_list, line, '${CMD}', f, output, None, 'sub')
    used = ['init_basic'] # start the 'used module' list

    flag = 0
    while flag == 0:

        print('Please select the next pipeline module:')
        module, used = get_modules(dir_pipe, moduletype='pre', used=used)

        if module == 'stop':
            flag = 1
            continue

        if module == None:
            print('')
        else:
            # save the old output
            bkup = copy(output)

            # executes the chosen module, write pipeline commands
            command = 'epi.commands.{}.run(output)'.format(module)
            line, output = eval(command)

            # if module call was unsuccessful, don't count as used.
            if output == None:
                used.pop()

            # write line in script if successful
            p_list, output = writer(p_list, line, '${CMD}', f, output, bkup, 'sub')

        # print the current pipeline configuration, ask to continue
        print('Current pre-processing pipeline:')
        print_list(p_list)
        response = raw_input("""Type 'stop' to stop, else continue: """)
        if response == 'stop':
            flag = 1

    # add each subject to the proclist, close the subject loop
    f.write('\nchmod 750 ${CMD}\n'
            '# append this subject to the process queue\n'
            'echo ${CMD} >> ${PROC}\n'
            'done\n\n'
            '# calls to QC programs\n')

    # add user-defined qc runs
    p_list = [] # keeps track of our command-list
    flag = 0 # breaks us out of the loop
    used = []

    while flag == 0:
        print('Please select the next QC module:')
        module, used = get_modules(dir_pipe, moduletype='qc', used=used)

        if module == 'stop':
            flag = 1
            continue

        if module == None:
            print('')
        else:
            # save the old output
            bkup = copy(output)

            # executes the chosen module, write pipeline commands
            line, output = eval('epi.commands.{}.run(DIR_DATA, expt, mode)'.format(module))
            p_list, output = writer(p_list, line, '${PROC}', f, output, bkup, 'exp')

        # print the current pipeline configuration, ask to continue
        print('The QC pipeline currently looks like this:')
        print_list(p_list)
        response = raw_input("""Type 'stop' to stop, else continue: """)
        if response == 'stop':
            flag = 1

    # close the file, make executable by owner + group, and execute
    print('Saving master script & generating subject-specific scripts.')
    f.write('\n')
    f.close()
    os.chmod(os.path.join(DIR_DATA, expt, master), 0755)
    os.system('bash ' + os.path.join(DIR_DATA, expt, master))

    # print some final remarks
    print('Run in serial: . {proc}\nRun on queue:  epi-queue {proc} queuename.q'.format(
                                               proc=os.path.join(DIR_DATA, expt, proc)))

if __name__ == "__main__":

    if len(sys.argv) == 2 and sys.argv[1] == 'help':
        help_query()
    elif len(sys.argv) == 2 and sys.argv[1] == 'verify':
        print('Please specify an experiment.')
        get_experiments(check='check')
    elif len(sys.argv) == 2 and sys.argv[1] == 'check':
        check_environment('verbose')
    elif len(sys.argv) == 2 and sys.argv[1] == 'clean':
        run_cleanup()
    elif len(sys.argv) == 2 and sys.argv[1] == 'run':
        main()
    else:
        print(__doc__)
