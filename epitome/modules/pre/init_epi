#!/bin/bash

cat <<EOF
export DATA_QUALITY=${1}
export DELTR=${2}
export DESPIKE=${3}
export TPATTERN=${4}
export NORMALIZE=${5}
export MASKING=${6}
export MASK_METHOD=${7}

EOF

cat <<"EOF"
echo '*** MODULE: init_epi. Standard pre-processing for standard fMRI data. ***'

# loop through sessions
DIR_SESS=`ls -d -- ${DIR_DATA}/${DIR_EXPT}/${SUB}/${DATA_TYPE}/*/`
for SESS in ${DIR_SESS}; do
    
    # make the output folder for the paramaters
    if [ ! -d ${SESS}/PARAMS ]; then
        mkdir ${SESS}/PARAMS
    fi

    # loop through runs
    DIR_RUNS=`ls -d -- ${SESS}/RUN*`
    for RUN in ${DIR_RUNS}; do
        NUM=`basename ${RUN} | sed 's/[^0-9]//g'`
        FILE=`echo ${RUN}/*.nii.gz`

        # 1: Reorient, delete initial TRs, despike, slice time correct 
        if [ ! -f ${SESS}/func_tshift.${ID}.${NUM}.nii.gz ]; then
            # ensure all data is in RAI
            3daxialize \
                -prefix ${SESS}/func_tmp_RAI.${ID}.${NUM}.nii.gz \
                -axial \
                ${FILE} 
            
            # retain 1st TR from 1st run (prestabilization)
            if [ ${DATA_QUALITY} = 'low' ] && [ ${NUM} = 01 ]; then
                3dcalc \
                    -prefix ${SESS}/anat_EPI_tmp_initTR.nii.gz \
                    -a ${SESS}/func_tmp_RAI.${ID}.${NUM}.nii.gz[0] \
                    -expr 'a'
            fi

            # Generate physiological noise regressors if they exist
            if [ -f ${RUN}/resp.*.phys ] && [ -f ${RUN}/card.*.phys ]; then
                
                # get x, y, z, t dims, and TR length
                X=`fslhd ${RUN}/*.nii.gz | sed -n 6p | cut -c 5-`
                Y=`fslhd ${RUN}/*.nii.gz | sed -n 7p | cut -c 5-`
                Z=`fslhd ${RUN}/*.nii.gz | sed -n 8p | cut -c 5-`
                NTRS=`fslhd ${RUN}/*.nii.gz | sed -n 9p | cut -c 5-`
                TR=`fslhd ${RUN}/*.nii.gz | sed -n 22p | cut -c 9-`
                
                # find the smallest dimension in x, y, z 
                XYZ=($X $Y $Z)
                SLICE=`echo ${XYZ[*]} | python -c \
                      "print sorted(map(int, raw_input().split(' ')))[0]"`

                # get the number of samples in physio logs
                SAMP=`cat ${RUN}/resp.*.phys | wc -w`

                # compute sampling rate of physio recording
                UNITS=`fslhd ${RUN}/*.nii.gz | sed -n 14p | cut -c 11- | xargs`
                
                # convert ms to seconds, if necessary
                if [ ${UNITS} = 's' ]; then
                    TIME=`perl -e "print ${NTRS} * ${TR}"`
                elif [ ${UNITS} = 'ms' ]; then
                    TIME=`perl -e "print ${NTRS} * ${TR} / 1000"`
                fi 

                # get the sampling rate in Hz
                FS=`perl -e "print ${SAMP} / ${TIME}"`
                
                # Run McRetroTS -- Respfile Cardfile VolTR Nslices PhysFS Graph
                # NB! Right now we are NOT using the slice-wise information,
                # as the slice-wise information assumes alternating+Z! Jeesh!
                ${McRetroTS} \
                    ${RUN}/resp.*.phys ${RUN}/card.*.phys \
                          ${TR} ${SLICE} ${FS} 0

                # Output both the single-slice and multi-slice data
                1dcat \
                    oba.slibase.1D[0..12]{${DELTR}..$} \
                    > ${SESS}/PARAMS/phys.${ID}.${NUM}.1D

                1dcat \
                    oba.slibase.1D[0..$]{${DELTR}..$} \
                    > ${SESS}/PARAMS/phys_slicewise.${ID}.${NUM}.1D

            fi

            # delete initial time points
            3dcalc \
                -prefix ${SESS}/func_tmp_del.${ID}.${NUM}.nii.gz \
                -a ${SESS}/func_tmp_RAI.${ID}.${NUM}.nii.gz[${DELTR}..$] \
                -expr 'a'

            # despike
            if [ ${DESPIKE} == 'on' ]; then
                3dDespike \
                    -prefix ${SESS}/func_tmp_despike.${ID}.${NUM}.nii.gz \
                    -ssave ${SESS}/PARAMS/spikes.${ID}.${NUM}.nii.gz \
                     ${SESS}/func_tmp_del.${ID}.${NUM}.nii.gz
            else
                cp ${SESS}/func_tmp_del.${ID}.${NUM}.nii.gz \
                   ${SESS}/func_tmp_despike.${ID}.${NUM}.nii.gz
            fi

            # slice time correction (can include specified timings)
            #NB -- Physio regression must happen BEFORE NOW if we want to
            # include slice-wise regressors!
            # But it isn't clear to me how important this is.
            if [ ${TPATTERN} != 'none' ]; then
                if [ -f ${RUN}/slice_timing.1D ]; then
                    3dTshift \
                        -prefix ${SESS}/func_tshift.${ID}.${NUM}.nii.gz \
                        -verbose \
                        -Fourier \
                        -tpattern @ ${RUN}/slice_timing.1D \
                        ${SESS}/func_tmp_despike.${ID}.${NUM}.nii.gz
                else
                    3dTshift \
                        -prefix ${SESS}/func_tshift.${ID}.${NUM}.nii.gz \
                        -verbose -Fourier \
                        -tpattern ${TPATTERN} \
                        ${SESS}/func_tmp_despike.${ID}.${NUM}.nii.gz
                fi
            # if tpattern == 'none', we just copy to make the output
            else
                cp ${SESS}/func_tmp_despike.${ID}.${NUM}.nii.gz \
                   ${SESS}/func_tshift.${ID}.${NUM}.nii.gz
            fi
        fi

        # 2: Deoblique, motion correct, and scale data
        if [ ! -f ${SESS}/func_motion.${ID}.${NUM}.nii.gz ]; then
            # deoblique run
            3dWarp \
                -prefix ${SESS}/func_ob.${ID}.${NUM}.nii.gz \
                -deoblique \
                -quintic \
                -verb \
                -gridset ${SESS}/func_tshift.${ID}.01.nii.gz \
                ${SESS}/func_tshift.${ID}.${NUM}.nii.gz

            # motion correct to 9th sub-brick of 1st run
            3dvolreg \
                -prefix ${SESS}/func_motion.${ID}.${NUM}.nii.gz \
                -base ${SESS}'/func_ob.'${ID}'.01.nii.gz[8]' \
                -twopass \
                -twoblur 3 \
                -twodup \
                -coarse 10 3 \
                -Fourier \
                -zpad 10 \
                -float \
                -1Dfile ${SESS}/PARAMS/motion.${ID}.${NUM}.1D \
                -1Dmatrix_save ${SESS}/PARAMS/3dvolreg.${ID}.${NUM}.aff12.1D \
                ${SESS}/func_ob.${ID}.${NUM}.nii.gz

            # create lagged motion regressors
            if [ ! -f ${SESS}/PARAMS/lag.motion.${ID}.${NUM}.1D ]; then
                1dcat \
                    ${SESS}/PARAMS/motion.${ID}.${NUM}.1D'{0}' > \
                    ${SESS}/PARAMS/lag.motion.${ID}.${NUM}.1D

                1dcat \
                    ${SESS}/PARAMS/motion.${ID}.${NUM}.1D'{0..$}' >> \
                    ${SESS}/PARAMS/lag.motion.${ID}.${NUM}.1D
            fi

            # create derivative of motion regressors
            if [ ! -f ${SESS}/PARAMS/dif.motion.${ID}.${NUM}.1D ]; then
                1d_tool.py \
                    -infile ${SESS}/PARAMS/motion.${ID}.${NUM}.1D \
                    -backward_diff \
                    -write ${SESS}/PARAMS/dif.motion.${ID}.${NUM}.1D
            fi

            # make a registration volume for low-quality data if required
            if [ ${DATA_QUALITY} = 'low' ] && [ ${NUM} = 01 ]; then
                # deoblique registration volume
                3dWarp \
                    -prefix ${SESS}/anat_EPI_tmp_initTR_ob.nii.gz \
                    -deoblique \
                    -quintic \
                    -verb \
                    -gridset ${SESS}/func_tshift.01.nii.gz \
                    ${SESS}/anat_EPI_tmp_initTR.nii.gz

                # align registration volume with the motion correction TR
                3dvolreg \
                    -prefix ${SESS}/anat_EPI_initTR.nii.gz \
                    -base ${SESS}'/func_ob.01.nii.gz[8]' \
                    -twopass \
                    -twoblur 3 \
                    -twodup \
                    -Fourier \
                    -zpad 2 \
                    -float \
                    ${SESS}/anat_EPI_tmp_initTR_ob.nii.gz
            fi
        fi
        
        # create TS mean for each run
        if [ ! -f ${SESS}/anat_EPI_brain.nii.gz ]; then
            3dTstat \
                -prefix ${SESS}/anat_EPI_tmp_ts_mean.${ID}.${NUM}.nii.gz \
                ${SESS}/func_motion.${ID}.${NUM}.nii.gz
        fi

    done

    ## create session 3D EPI brain + mask (loosened peels)
    if [ ! -f ${SESS}/anat_EPI_brain.nii.gz ]; then
        # create mean over all runs
        3dMean \
            -prefix ${SESS}/anat_EPI_tmp_mean.nii.gz \
            ${SESS}/anat_EPI_tmp_ts_mean.${ID}.*.nii.gz
        
        3dTstat \
            -prefix ${SESS}/anat_EPI_tmp_vol.nii.gz \
            ${SESS}/anat_EPI_tmp_mean.nii.gz

        # options for AFNI method
        if [ ${MASK_METHOD} == 'AFNI' ]; then
        
            # set masking variables given each preset
            if [ ${MASKING} == 'loosest' ]; then CLFRAC=0.15; PEELS=1; fi
            if [ ${MASKING} == 'loose' ]; then CLFRAC=0.2; PEELS=1; fi
            if [ ${MASKING} == 'normal' ]; then CLFRAC=0.3; PEELS=3; fi
            if [ ${MASKING} == 'tight' ]; then CLFRAC=0.5; PEELS=3; fi

            # compute the mask using 3dAutomask, dilate
            3dAutomask \
                -prefix ${SESS}/anat_EPI_tmp_mask.nii.gz \
                -clfrac ${CLFRAC} \
                -peels ${PEELS} \
                ${SESS}/anat_EPI_tmp_vol.nii.gz
            3dcalc \
                -prefix ${SESS}/anat_EPI_mask.nii.gz \
                -a ${SESS}/anat_EPI_tmp_mask.nii.gz \
                -b a+i -c a-i -d a+j -e a-j -f a+k -g a-k \
                -expr 'amongst(1,a,b,c,d,e,f,g)'
            rm ${SESS}/anat_EPI_tmp_mask.nii.gz
        fi

        # options for FSL method
        if [ ${MASK_METHOD} == 'FSL' ]; then
        
            # set masking variables given each preset
            if [ ${MASKING} == 'loosest' ]; then FI=0.15; VG=0.4; fi
            if [ ${MASKING} == 'loose' ]; then FI=0.2; VG=0; fi
            if [ ${MASKING} == 'normal' ]; then FI=0.3; VG=0; fi
            if [ ${MASKING} == 'tight' ]; then FI=0.5; VG=0; fi

            # compute the mask using robust BET, dilate
            bet \
                ${SESS}/anat_EPI_tmp_vol.nii.gz \
                ${SESS}/anat_EPI_mask.nii.gz \
                -R -n -m \
                -f ${FI} \
                -g ${VG}
            fslmaths \
                ${SESS}/anat_EPI_mask_mask.nii.gz \
                -dilD \
                ${SESS}/anat_EPI_mask_mask_dil.nii.gz
            rm ${SESS}/anat_EPI_mask.nii.gz
            rm ${SESS}/anat_EPI_mask_mask.nii.gz
            mv ${SESS}/anat_EPI_mask_mask_dil.nii.gz ${SESS}/anat_EPI_mask.nii.gz
        fi
        
        3dcalc \
            -prefix ${SESS}/anat_EPI_brain.nii.gz \
            -a ${SESS}/anat_EPI_tmp_vol.nii.gz \
            -b ${SESS}/anat_EPI_mask.nii.gz \
            -expr 'a*b'

        if [ ${DATA_QUALITY} = 'low' ]; then
            3dcalc \
                -prefix ${SESS}/anat_EPI_initTR_brain.nii.gz \
                -a ${SESS}/anat_EPI_initTR.nii.gz \
                -b ${SESS}/anat_EPI_mask.nii.gz \
                -expr 'a*b'
        fi

    fi

    DIR_RUNS=`ls -d -- ${SESS}/RUN*`
    for RUN in ${DIR_RUNS}; do
        NUM=`basename ${RUN} | sed 's/[^0-9]//g'`

        if [ ! -f ${SESS}/func_scaled.${ID}.${NUM}.nii.gz ]; then

            # calculate time series mean
            3dTstat \
                -prefix ${SESS}/func_tmp_mean.${ID}.${NUM}.nii.gz \
                -mean \
                ${SESS}/func_motion.${ID}.${NUM}.nii.gz

            # OFF: Image multiplied by whole brain mask only
            if [ ${NORMALIZE} == 'off' ]; then
                3dcalc \
                    -prefix ${SESS}/func_scaled.${ID}.${NUM}.nii.gz \
                    -datum float \
                    -a ${SESS}/func_motion.${ID}.${NUM}.nii.gz \
                    -b ${SESS}/anat_EPI_mask.nii.gz \
                    -expr "a*b"
            fi

            # % SIGNAL CHANGE: mean = 0, 1% == 1 (normalized by mean)... careful using this with event-related designs
            if [ ${NORMALIZE} == 'pct' ]; then
                3dcalc \
                   -prefix ${SESS}/func_scaled.${ID}.${NUM}.nii.gz \
                   -datum float \
                   -a ${SESS}/func_motion.${ID}.${NUM}.nii.gz \
                   -b ${SESS}/func_tmp_mean.${ID}.${NUM}.nii.gz \
                   -c ${SESS}/anat_EPI_mask.nii.gz \
                   -expr "(a-b)/b*c*100"
            fi
 
            # SCALE: set global mean = 1000, arbitrary units, no normalization
            if [ ${NORMALIZE} == 'scale' ]; then
                MEAN=`3dmaskave \
                    -quiet \
                    -mask ${SESS}/anat_EPI_brain.nii.gz \
                    ${SESS}/func_tmp_mean.${ID}.${NUM}.nii.gz`

                3dcalc \
                    -prefix ${SESS}/func_scaled.${ID}.${NUM}.nii.gz \
                    -datum float \
                    -a ${SESS}/func_motion.${ID}.${NUM}.nii.gz \
                    -b ${SESS}/anat_EPI_mask.nii.gz \
                    -expr "a*(1000/${MEAN})*b"
            fi
        fi
    done
done

EOF
