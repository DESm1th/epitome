#!/bin/bash

cat <<EOF
DATA_QUALITY=`echo ${1}`
DELTR=`echo ${2}`
TPATTERN=`echo ${3}`
NORMALIZE=`echo ${4}`
MASKING=`echo ${5}`

echo '************************************************************************'
echo '                  General pre-processing for all fMRI data'
echo ''
echo '   Running on experiment ${DIR_EXPT} , image modality ${DATA_TYPE} '
echo '   - Using data quality: ${DATA_QUALITY},'
echo '   - Orients data to RAI,'
echo '   - Deletes ${DELTR} TRs from the beginning of each run,'
echo '   - Removes time-series outliers, or "despikes", the data,'
echo '   - Corrects for slice timing using the pattern ${TPATTERN},'
echo '   - Deobliques the data,'
echo '   - Motion correction (also outputs motion parameters),'
echo '   - Creates deskulled template EPI and ${MASKING} whole-brain mask,'
echo '   - Scales each voxel ${NORMALIZE},'
echo '   - Calculates global mean & DVARS (Power et al., 2012).'
echo ''
echo '************************************************************************'

EOF

cat <<"EOF"
cd /tmp

# loop through sessions
DIR_SESS=`ls -d -- ${DIR_DATA}/${DIR_EXPT}/${SUB}/${DATA_TYPE}/*/`
for SESS in ${DIR_SESS}; do
    
    # make the output folder for the paramaters
    mkdir ${SESS}/PARAMS

    # loop through runs
    DIR_RUNS=`ls -d -- ${SESS}/RUN*`
    for RUN in ${DIR_RUNS}; do
        NUM=`basename ${RUN} | sed 's/[^0-9]//g'`
        FILE=`echo ${RUN}/*.nii.gz`

        # 1: Reorient, delete initial TRs, despike, slice time correct 
        if [ ! -f ${SESS}/func_tshift.${NUM}.nii.gz ]; then
            # ensure all data is in RAI
            3daxialize \
                -prefix ${SESS}/func_tmp_RAI.${NUM}.nii.gz \
                -axial \
                ${FILE} 
            
            # retain 1st TR from 1st run
            if [ ${DATA_QUALITY} = 'low' ] && [ ${NUM} = 01 ]; then
                # strip off the pre-stabilization TR
                3dcalc \
                    -prefix ${SESS}/anat_EPI_tmp_initTR.nii.gz \
                    -a ${SESS}/func_tmp_RAI.${NUM}.nii.gz[0] \
                    -expr 'a'
            fi

            # Generate physiological noise regressors if they exist
            if [ -f ${RUN}/resp.*.phys ] && [ -f ${RUN}/card.*.phys ]; then
                
                # get x, y, z, t dims, and TR length
                X=`fslhd ${RUN}/*.nii.gz | sed -n 6p | cut -c 5-`

                Y=`fslhd ${RUN}/*.nii.gz | sed -n 7p | cut -c 5-`

                Z=`fslhd ${RUN}/*.nii.gz | sed -n 8p | cut -c 5-`

                NTRS=`fslhd ${RUN}/*.nii.gz | sed -n 9p | cut -c 5-`

                TR=`fslhd ${RUN}/*.nii.gz | sed -n 22p | cut -c 9-`
                
                # find the smallest dimension in x, y, z 
                XYZ=($X $Y $Z)
                SLICE=`echo ${XYZ[*]} | python -c \
                      "print sorted(map(int,raw_input().split(' ')))[0]"`

                # get the number of samples in physio logs
                SAMP=`cat ${RUN}/resp.*.phys | wc -w`

                # compute sampling rate of physio recording
                UNITS=`fslhd ${RUN}/*.nii.gz | sed -n 14p | cut -c 11- | xargs`
                
                # convert ms to seconds, if necessary
                if [ ${UNITS} = 's' ]; then
                    TIME=`perl -e "print ${NTRS} * ${TR}"`
                elif [ ${UNITS} = 'ms' ]; then
                    TIME=`perl -e "print ${NTRS} * ${TR} / 1000"`
                fi 

                # get the sampling rate in Hz
                FS=`perl -e "print ${SAMP} / ${TIME}"`
                
                # Run McRetroTS -- Respfile Cardfile VolTR Nslices PhysFS Graph
                # NB! Right now we are NOT using the slice-wise information,
                # as the slice-wise information assumes alternating+Z! Jeesh!
                ${McRetroTS} \
                    ${RUN}/resp.*.phys ${RUN}/card.*.phys \
                          ${TR} ${SLICE} ${FS} 0

                # Output both the single-slice and multi-slice data
                1dcat \
                    oba.slibase.1D[0..12]{${DELTR}..$} \
                    > ${SESS}/PARAMS/phys.${NUM}.1D

                1dcat \
                    oba.slibase.1D[0..$]{${DELTR}..$} \
                    > ${SESS}/PARAMS/phys_slicewise.${NUM}.1D

            fi

            # delete initial time points
            3dcalc \
                -prefix ${SESS}/func_tmp_del.${NUM}.nii.gz \
                -a ${SESS}/func_tmp_RAI.${NUM}.nii.gz[${DELTR}..$] \
                -expr 'a'

            # despike
            3dDespike \
                -prefix ${SESS}/func_tmp_despike.${NUM}.nii.gz \
                -ssave ${SESS}/PARAMS/spikes.${NUM}.nii.gz \
                 ${SESS}/func_tmp_del.${NUM}.nii.gz

            # slice time correction (can include specified timings)
            #NB -- Physio regression must happen BEFORE NOW if we want to
            # include slice-wise regressors!
            # But it isn't clear to me how important this is.
            if [ -f ${RUN}/slice_timing.1D ]; then
                3dTshift \
                    -prefix ${SESS}/func_tshift.${NUM}.nii.gz \
                    -verbose \
                    -Fourier \
                    -tpattern @ ${RUN}/slice_timing.1D \
                    ${SESS}/func_tmp_despike.${NUM}.nii.gz
            else
                3dTshift \
                    -prefix ${SESS}/func_tshift.${NUM}.nii.gz \
                    -verbose -Fourier \
                    -tpattern ${TPATTERN} \
                    ${SESS}/func_tmp_despike.${NUM}.nii.gz
            fi
        fi

        # 2: Deoblique, motion correct, and scale data
        if [ ! -f ${SESS}/func_motion.${NUM}.nii.gz ]; then
            # deoblique run
            3dWarp \
                -prefix ${SESS}/func_ob.${NUM}.nii.gz \
                -deoblique \
                -quintic \
                -verb \
                -gridset ${SESS}/func_tshift.01.nii.gz \
                ${SESS}/func_tshift.${NUM}.nii.gz

            # motion correct to 9th sub-brick of 1st run
            3dvolreg \
                -prefix ${SESS}/func_motion.${NUM}.nii.gz \
                -base ${SESS}'/func_ob.01.nii.gz[8]' \
                -twopass \
                -twoblur 3 \
                -twodup \
                -Fourier \
                -zpad 2 \
                -float \
                -1Dfile ${SESS}/PARAMS/motion.${NUM}.1D \
                -1Dmatrix_save ${SESS}/PARAMS/3dvolreg.${NUM}.aff12.1D \
                ${SESS}/func_ob.${NUM}.nii.gz

            # make a registration volume for low-quality data if required
            if [ ${DATA_QUALITY} = 'low' ] && [ ${NUM} = 01 ]; then
                # deoblique registration volume
                3dWarp \
                    -prefix ${SESS}/anat_EPI_tmp_initTR_ob.nii.gz \
                    -deoblique \
                    -quintic \
                    -verb \
                    -gridset ${SESS}/func_tshift.01.nii.gz \
                    ${SESS}/anat_EPI_tmp_initTR.nii.gz

                # align registration volume with the motion correction TR
                3dvolreg \
                    -prefix ${SESS}/anat_EPI_initTR.nii.gz \
                    -base ${SESS}'/func_ob.01.nii.gz[8]' \
                    -twopass \
                    -twoblur 3 \
                    -twodup \
                    -Fourier \
                    -zpad 2 \
                    -float \
                    ${SESS}/anat_EPI_tmp_initTR_ob.nii.gz
            fi
        fi
        
        # create TS mean for each run
        if [ ! -f ${SESS}/anat_EPI_brain.nii.gz ]; then
            3dTstat \
                -prefix ${SESS}/anat_EPI_tmp_ts_mean.${NUM}.nii.gz \
                ${SESS}/func_motion.${NUM}.nii.gz
        fi

    done

    ## create session 3D EPI brain + mask (loosened peels)
    if [ ! -f ${SESS}/anat_EPI_brain.nii.gz ]; then
        # create mean over all runs
        3dMean \
            -prefix ${SESS}/anat_EPI_tmp_mean.nii.gz \
            ${SESS}/anat_EPI_tmp_ts_mean*
        
        3dTstat \
            -prefix ${SESS}/anat_EPI_tmp_vol.nii.gz \
            ${SESS}/anat_EPI_tmp_mean.nii.gz
        
        # set masking variables given each preset
        if [ ${MASKING} == 'loose' ]; then
            CLFRAC=0.3
            PEELS=1
        fi

        if [ ${MASKING} == 'normal' ]; then
            CLFRAC=0.5
            PEELS=3
        fi

        if [ ${MASKING} == 'tight' ]; then
            CLFRAC=0.7
            PEELS=3
        fi

        # compute the mask
        3dAutomask \
            -prefix ${SESS}/anat_EPI_mask.nii.gz \
            -clfrac ${CLFRAC} \
            -peels ${PEELS} \
            ${SESS}/anat_EPI_tmp_vol.nii.gz
        
        3dcalc \
            -prefix ${SESS}/anat_EPI_brain.nii.gz \
            -a ${SESS}/anat_EPI_tmp_vol.nii.gz \
            -b ${SESS}/anat_EPI_mask.nii.gz \
            -expr 'a*b'

        if [ ${DATA_QUALITY} = 'low' ]; then
            3dcalc \
                -prefix ${SESS}/anat_EPI_initTR_brain.nii.gz \
                -a ${SESS}/anat_EPI_initTR.nii.gz \
                -b ${SESS}/anat_EPI_mask.nii.gz \
                -expr 'a*b'
        fi

    fi

    DIR_RUNS=`ls -d -- ${SESS}/RUN*`
    for RUN in ${DIR_RUNS}; do
        NUM=`basename ${RUN} | sed 's/[^0-9]//g'`

        if [ ! -f ${SESS}/func_scaled.${NUM}.nii.gz ]; then

            # calculate time series mean
            3dTstat \
                -prefix ${SESS}/func_tmp_mean.${NUM}.nii.gz \
                -mean \
                ${SESS}/func_motion.${NUM}.nii.gz

            # OFF: Image multiplied by whole brain mask only
            if [ ${NORMALIZE} == 'off' ]; then
                3dcalc \
                    -prefix ${SESS}/func_scaled.${NUM}.nii.gz \
                    -datum float \
                    -a ${SESS}/func_motion.${NUM}.nii.gz \
                    -b ${SESS}/anat_EPI_mask.nii.gz \
                    -expr "a*b"
            fi

            # % SIGNAL CHANGE: mean = 100, 1% == 1, normalized by mean
            if [ ${NORMALIZE} == 'pct' ]; then
                3dcalc \
                   -prefix ${SESS}/func_scaled.${NUM}.nii.gz \
                   -datum float \
                   -a ${SESS}/func_motion.${NUM}.nii.gz \
                   -b ${SESS}/func_tmp_mean.${NUM}.nii.gz \
                   -c ${SESS}/anat_EPI_mask.nii.gz \
                   -expr "(a-b)/b*c"
            fi
 
            # SCALE: global mean = 1000, arbitrary units, no normalization
            if [ ${NORMALIZE} == 'scale' ]; then
                3dcalc \
                    -prefix ${SESS}/func_scaled.${NUM}.nii.gz \
                    -datum float \
                    -a ${SESS}/func_motion.${NUM}.nii.gz \
                    -b ${SESS}/func_tmp_mean.${NUM}.nii.gz \
                    -c ${SESS}/anat_EPI_mask.nii.gz \
                    -expr "a*(1000/b)*c"
            fi

        fi

        # % signal change DVARS (Power et. al Neuroimage 2012)
        if [ ! -f ${SESS}/PARAMS/DVARS.${NUM}.1D ]; then
            3dcalc \
                -a ${SESS}/func_scaled.${NUM}.nii.gz \
                -b 'a[0,0,0,-1]' \
                -expr '(a - b)^2' \
                -prefix ${SESS}/func_tmp_backdif.${NUM}.nii.gz
           
            3dmaskave \
                -mask ${SESS}/anat_EPI_mask.nii.gz \
                -quiet ${SESS}/func_tmp_backdif.${NUM}.nii.gz \
                > ${SESS}/PARAMS/tmp_backdif.${NUM}.1D
            
            1deval \
                -a ${SESS}/PARAMS/tmp_backdif.${NUM}.1D \
                -expr 'sqrt(a)' \
                > ${SESS}/PARAMS/DVARS.${NUM}.1D
        fi

        # Global mean
        if [ ! -f ${SESS}/PARAMS/global_mean.${NUM}.1D ]; then
            3dmaskave \
                -mask ${SESS}/anat_EPI_mask.nii.gz \
                -quiet ${SESS}/func_scaled.${NUM}.nii.gz \
                > ${SESS}/PARAMS/global_mean.${NUM}.1D
        fi

    done
    rm ${SESS}/anat_EPI_tmp*.nii.gz >& /dev/null
    rm ${SESS}/func_tmp*.nii.gz >& /dev/null
    rm ${SESS}/PARAMS/tmp*.1D >& /dev/null
done
cd ${DIR_PIPE}

EOF
